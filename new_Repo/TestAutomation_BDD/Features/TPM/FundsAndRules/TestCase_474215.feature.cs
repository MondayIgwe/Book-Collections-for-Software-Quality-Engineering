// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kantar_BDD.Features.TPM.FundsAndRules
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestCase_474215")]
    public partial class TestCase_474215Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TestCase_474215.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/TPM/FundsAndRules", "TestCase_474215", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("WEB_TPM_SP_FRDOCUMENT_RATEBASEDFUND_NEGC_MOV_001")]
        [NUnit.Framework.CategoryAttribute("BDD_474215")]
        [NUnit.Framework.CategoryAttribute("PROMO_Nightly")]
        [NUnit.Framework.CategoryAttribute("FundsAndRules")]
        [NUnit.Framework.TestCaseAttribute("Rate Based Fund", "01/01/2020", "31/10/2020", "Level 5", "TRUE", "EC86162", "SOURCE1 - NETAMOUNT", "10", "20", "Deposit", "POSC", "NEGC", "10", "Funds & Rules", "", "", "", null)]
        public virtual void WEB_TPM_SP_FRDOCUMENT_RATEBASEDFUND_NEGC_MOV_001(
                    string cONFIGURATIONID, 
                    string sTARTSELLIN, 
                    string eNDSELLIN, 
                    string cUSTOMERLEVEL, 
                    string sELECTCUSTOMERNODES, 
                    string cUST, 
                    string rATEFUNDSOURCE, 
                    string iNITIALRATEFUND, 
                    string nEWINITRATEFUND, 
                    string mOVEMENTS, 
                    string mOVEMENTS2, 
                    string mOVEMENTS3, 
                    string nEWRATEFUND, 
                    string pAGEDESCRIPTION, 
                    string pRODUCT_GROUPS, 
                    string sTART_DATE, 
                    string eND_DATE, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BDD_474215",
                    "PROMO_Nightly",
                    "FundsAndRules"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CONFIGURATIONID", cONFIGURATIONID);
            argumentsOfScenario.Add("STARTSELLIN", sTARTSELLIN);
            argumentsOfScenario.Add("ENDSELLIN", eNDSELLIN);
            argumentsOfScenario.Add("CUSTOMERLEVEL", cUSTOMERLEVEL);
            argumentsOfScenario.Add("SELECTCUSTOMERNODES", sELECTCUSTOMERNODES);
            argumentsOfScenario.Add("CUST", cUST);
            argumentsOfScenario.Add("RATEFUNDSOURCE", rATEFUNDSOURCE);
            argumentsOfScenario.Add("INITIALRATEFUND", iNITIALRATEFUND);
            argumentsOfScenario.Add("NEWINITRATEFUND", nEWINITRATEFUND);
            argumentsOfScenario.Add("MOVEMENTS", mOVEMENTS);
            argumentsOfScenario.Add("MOVEMENTS2", mOVEMENTS2);
            argumentsOfScenario.Add("MOVEMENTS3", mOVEMENTS3);
            argumentsOfScenario.Add("NEWRATEFUND", nEWRATEFUND);
            argumentsOfScenario.Add("PAGEDESCRIPTION", pAGEDESCRIPTION);
            argumentsOfScenario.Add("PRODUCT_GROUPS", pRODUCT_GROUPS);
            argumentsOfScenario.Add("START_DATE", sTART_DATE);
            argumentsOfScenario.Add("END_DATE", eND_DATE);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WEB_TPM_SP_FRDOCUMENT_RATEBASEDFUND_NEGC_MOV_001", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("the user navigates to the \'Funds & Rules\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When(string.Format("the user creates a new fund and rules \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\' \'{5}\' \'{6}\'", cONFIGURATIONID, cUSTOMERLEVEL, pAGEDESCRIPTION, sTARTSELLIN, eNDSELLIN, pRODUCT_GROUPS, rATEFUNDSOURCE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Constraints\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.And(string.Format("user adds a \'% Rate Fund\' constraint with value \'{0}\' \'{1}\' \'{2}\' \'\'", iNITIALRATEFUND, sTART_DATE, eND_DATE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Summary\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And("the user retrieves text from element \'Input By Label Name\' with value \'Funds & Ru" +
                        "les code\' and saves it as \'FundsRulesCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And("the user clicks on the \'Save Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.And("the user clicks on the \'Refresh Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.And("the user clicks on \'Text\' with value \'FundsRulesCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Constraints\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.Then("the user validates that column \'% Rate Fund\' has \'10.00\' with row text \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
 testRunner.And("the user validates that column \'Uncommitted Balance\' has \'0.0000\' with row text \'" +
                        "1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.And("the user validates that column \'Remaining balance\' has \'0.0000\' with row text \'1\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.When("the user clicks on \'Button\' with value \'Edit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.And(string.Format("the user enters \'{0}\' in cell with column \'% Rate Fund\' and row text \'1\'", nEWINITRATEFUND), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And("the user clicks on \'Button Link\' with value \'Calculate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.Then("the user validates that column \'Fund Source Value\' has \'10,000.0000\' with row tex" +
                        "t \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
 testRunner.And("the user validates that column \'% Rate Fund\' has \'20.00\' with row text \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And("the user validates that column \'Uncommitted Balance\' has \'2,000.0000\' with row te" +
                        "xt \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And("the user validates that column \'Remaining balance\' has \'2,000.0000\' with row text" +
                        " \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.When("the user clicks on the \'Open Folder Icon\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
 testRunner.Then("the user validates that popup \'Movements\' column \'Value\' has \'2,000.0000\' with ro" +
                        "w text \'Deposit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
 testRunner.And("the user validates that \'Input By Label Name\' with value \'Remaining balance\' has " +
                        "text \'2,000.0000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.And("the user validates that \'Input By Label Name\' with value \'Uncommitted Balance\' ha" +
                        "s text \'2,000.0000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.And("the \'Text\' with value \'POSC\'  is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.And("the \'Text\' with value \'NEGC\'  is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.When("the user clicks on \'Popup Button\' with value \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
 testRunner.And(string.Format("the user enters \'{0}\' in cell with column \'% Rate Fund\' and row text \'1\'", iNITIALRATEFUND), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.And("the user clicks on \'Button Link\' with value \'Calculate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.And("the user clicks on the \'Open Folder Icon\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.Then("the user validates that popup \'Movements\' column \'Value\' has \'2,000.0000\' with ro" +
                        "w text \'Deposit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
 testRunner.And("the user validates that popup \'Movements\' column \'Value\' has \'1,000.0000\' with ro" +
                        "w text \'NEGC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And("the user validates that \'Input By Label Name\' with value \'Remaining balance\' has " +
                        "text \'1,000.0000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.And("the user validates that \'Input By Label Name\' with value \'Uncommitted Balance\' ha" +
                        "s text \'1,000.0000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.And("the user validates that \'Input By Label Name\' with value \'Fund reserve\' has text " +
                        "\'0.0000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.When("the user clicks on \'Popup Button\' with value \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
 testRunner.And("the user clicks on the \'Save Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.And("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.And("the user clicks on \'Text\' with value \'FundsRulesCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Constraints\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
 testRunner.And("the user clicks on the \'Open Folder Icon\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
 testRunner.Then("the user validates that popup \'Movements\' column \'Value\' has \'2,000.0000\' with ro" +
                        "w text \'Deposit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
 testRunner.And("the user validates that popup \'Movements\' column \'Value\' has \'1,000.0000\' with ro" +
                        "w text \'NEGC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
 testRunner.And("the user validates that \'Input By Label Name\' with value \'Remaining balance\' has " +
                        "text \'1,000.0000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.And("the user validates that \'Input By Label Name\' with value \'Uncommitted Balance\' ha" +
                        "s text \'1,000.0000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
 testRunner.And("the user validates that \'Input By Label Name\' with value \'Fund reserve\' has text " +
                        "\'0.0000\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.When("the user clicks on \'Popup Button\' with value \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 74
 testRunner.And("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
