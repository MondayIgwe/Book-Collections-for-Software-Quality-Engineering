// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kantar_BDD.Features.TPM.PromoActions
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestCase_522811")]
    public partial class TestCase_522811Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TestCase_522811.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/TPM/PromoActions", "TestCase_522811", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("WEB_TPM_SP_PRODUCTGRID_QTYESTIMATED_CALCULATION_SKU_AND_DISPLAYS_001")]
        [NUnit.Framework.CategoryAttribute("BDD_522811")]
        [NUnit.Framework.CategoryAttribute("PROMO_Nightly")]
        [NUnit.Framework.CategoryAttribute("PromoActions")]
        [NUnit.Framework.TestCaseAttribute("XTEL TPM AUTOMATION - Global Group SM1V4", "EC94723", "Level 2", "d+10/m/y", "d+20/m/y", "d+10/m/y", "d+20/m/y", "SKUsumWithDisplays", "Coupon", "Display", "D002", "DISPLAY WINE 1.5", "Product", "022", "024", "100", "50", "BACCO BARBERA 0.75 lt", "BACCO BARDOLINO 0.75 lt", null)]
        public virtual void WEB_TPM_SP_PRODUCTGRID_QTYESTIMATED_CALCULATION_SKU_AND_DISPLAYS_001(
                    string dIVISION, 
                    string customer_Holder_P1, 
                    string cUSTLEVEL, 
                    string sELL_IN_START_P1, 
                    string sELL_IN_END_P1, 
                    string sELL_OUT_START_P1, 
                    string sELL_OUT_END_P1, 
                    string description_P1, 
                    string mechanic_P1, 
                    string display, 
                    string displayProd, 
                    string displayProd_Descr, 
                    string product, 
                    string sKUProd1, 
                    string sKUProd2, 
                    string total, 
                    string estimated_Quantity_Per_Product, 
                    string sKUProd1_Descr, 
                    string sKUProd2_Descr, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BDD_522811",
                    "PROMO_Nightly",
                    "PromoActions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DIVISION", dIVISION);
            argumentsOfScenario.Add("Customer_Holder_P1", customer_Holder_P1);
            argumentsOfScenario.Add("CUSTLEVEL", cUSTLEVEL);
            argumentsOfScenario.Add("SELL_IN_START_P1", sELL_IN_START_P1);
            argumentsOfScenario.Add("SELL_IN_END_P1", sELL_IN_END_P1);
            argumentsOfScenario.Add("SELL_OUT_START_P1", sELL_OUT_START_P1);
            argumentsOfScenario.Add("SELL_OUT_END_P1", sELL_OUT_END_P1);
            argumentsOfScenario.Add("Description_P1", description_P1);
            argumentsOfScenario.Add("Mechanic_P1", mechanic_P1);
            argumentsOfScenario.Add("Display", display);
            argumentsOfScenario.Add("DisplayProd", displayProd);
            argumentsOfScenario.Add("DisplayProd_Descr", displayProd_Descr);
            argumentsOfScenario.Add("Product", product);
            argumentsOfScenario.Add("SKUProd1", sKUProd1);
            argumentsOfScenario.Add("SKUProd2", sKUProd2);
            argumentsOfScenario.Add("Total", total);
            argumentsOfScenario.Add("Estimated_quantity_per_product", estimated_Quantity_Per_Product);
            argumentsOfScenario.Add("SKUProd1_descr", sKUProd1_Descr);
            argumentsOfScenario.Add("SKUProd2_descr", sKUProd2_Descr);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WEB_TPM_SP_PRODUCTGRID_QTYESTIMATED_CALCULATION_SKU_AND_DISPLAYS_001", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("the user navigates to the \'Promotional actions\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When(string.Format("the user creates a Promo \'{0}\' \'{1}\'", cUSTLEVEL, customer_Holder_P1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.And(string.Format("the user populates the cockpit \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\' \'{5}\'", description_P1, sELL_IN_START_P1, sELL_IN_END_P1, sELL_OUT_START_P1, sELL_OUT_END_P1, mechanic_P1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And(string.Format("the user adds a product \'{0}\' \'{1}\'", display, displayProd), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And(string.Format("the user adds a product \'{0}\' \'{1}\'", product, sKUProd1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And(string.Format("the user adds a product \'{0}\' \'{1}\'", product, sKUProd2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.And(string.Format("the user clicks on \'Product Grid CheckBox\' with value \'{0} - {1}\'", sKUProd1, sKUProd1_Descr), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Estimated quantity\' for product code \'ALL -" +
                            " Selected\'", total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And("the user clicks on \'Button\' with value \'Edit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.Then(string.Format("the user validates text \'{0}\' on column name \'Estimated quantity\' for product cod" +
                            "e \'{1}\'", estimated_Quantity_Per_Product, sKUProd1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
 testRunner.And(string.Format("the user validates text \'{0}\' on column name \'Estimated quantity\' for product cod" +
                            "e \'{1}\'", estimated_Quantity_Per_Product, sKUProd2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.When("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
 testRunner.And("the user clicks on the \'Alert Dialog No Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.And("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
