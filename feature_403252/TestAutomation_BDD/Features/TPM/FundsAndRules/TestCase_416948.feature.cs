// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kantar_BDD.Features.TPM.FundsAndRules
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestCase_416948")]
    public partial class TestCase_416948Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TestCase_416948.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/TPM/FundsAndRules", "TestCase_416948", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("WEB_TPM_SP_NAVIGATORS_CHECKS_001")]
        [NUnit.Framework.CategoryAttribute("BDD_416948")]
        [NUnit.Framework.CategoryAttribute("PROMO_Nightly")]
        [NUnit.Framework.CategoryAttribute("FundsAndRules")]
        [NUnit.Framework.TestCaseAttribute(@"Action code;Action Id;Description;Promo holder code;Customer holder;Status;Promotional mechanics;Sell-in start;Sell-in end;Sell-out start;Sell-out end;Delegation Child Action;Parent action code;Coverage;Confirmation level description;Template action;Contractual mode;Participants Level;Participants blocked;User creator;Logged user;Division;Promo Grouping;Creation Date;Last Maintenance Date;Responsible User;Total Potential;Source ID Action;Template ID Action", "Customer (Ship-To(s))", @"Action code;Action Id;Description;Plan Contractor Code;Plan Contractor Description;Scenario ID;Scenario Description;On Base Scenario;Reference Year;Promo holder code;Customer holder;Status;Promotional mechanics;Sell-in start;Sell-in end;Sell-out start;Sell-out end;Delegation Child Action;Parent action code;Coverage;Confirmation level description;Template action;Contractual mode;Participants Level;Participants blocked;User creator;Logged user;Division;Promo Grouping;Creation Date;Last Maintenance Date;Responsible User;Total Potential;Source ID Action;Template ID Action", @"ID ACTION;Action Id;Description;Parent holder code;Original Contractor des.;Customer holder;Delegate Lev. Contractor;CUSTOMER;Customer holder level;Activity;Sell In Start;Sell In End;Sell Out Start;Sell Out End;Description;Confirmation level;Agreement Mode;Participants Level;Participants blocked;Child rebate rejected;Create;Division;Customer holder level;Workflow model ID;Cod. WF HD Status;ID WF Status;Coverage;Confirmation level code;Contractual Mode;Participants level", "Code;Name;Hier. level;Level;Start Date;End Date;Division;Default Driver Initialis" +
            "ed;ID Driver;Document key", "ID ACTION;Action Id;Description;Description;Configuration;Funds & Rules;Limit;Val" +
            "ue;Customer holder;Division;Product code;Product des.", "Open Detail", @"ID ACTION;Description;Division;Customer holder;User Responsible;Ship-to code;Contractor;Product Level;Host Prod. Code;Product;Estimated quantity;Pre Promo Price;% Cut Price;% Def. Cut Price;Rate Disc;Def. Rate Disc;Estimated goods discount;Estimated Total Discounts;Total discounts incidence;Estimated cost;Demo;In-store costs;Simulated Quantity;Baseline Quantity;Uplift Quantity", @"Division;Node code;Description;Description;Promo pressure YTD;Planned promo pressure;Target promo pressure;Actual promo volume YTD;Actual volume YTD ;Promo Plan Vol.;Planned volume;Promo investment YTD;Planned Promo investment;Budget Promo investment;Delta Actual VS YTD;Delta Actual VS Plan;Actual Promo sales;Actual sales;Intensity index", @"Division;Division;Hierarchy type;Codenode Indirect;Descr. Code Indirect;Code Level Indirect;Descr. Level Indirect;Customer code;Customer description;Level;Level;Products;Product;Prod. Attribute;Prod. Level;Allocation Weight;Cancelled;Lead Time;SI/SO days of delay", "Promo Plan ID;Division;Customer Code;CUSTOMER;Customer holder level;Year of Refer" +
            "ence;Start Date;End Date;Responsible code;Responsible User;Code Review;Current R" +
            "eview;Base Scenario;Document key;User Resp. by Segment;Resp. by Segment", "Promo Calendar", "General Info", "Promo Grid", "Anomaly Report", "Promo Plan Dashboard", "Links", "Promotion Comparison Dashboard", "Funds & Rules code;Funds & Rules;Start Date;End Date;Funds & Rules Contractor;Con" +
            "figuration;Status;Customer holder level;Division", "Set of rules code;Funds & Rules;Customer holder code;Customer holder;Start Date;E" +
            "nd Date;Configuration;Status;Customer holder level;Division", "633", "Fund description;ID Bucket;Des. Bucket;Reason type;Start Date;End Date;On open ye" +
            "ar;Year;Month;Quarter;Division;Holder;CUSTOMER;Status;Product;Prod. Attribute;Fu" +
            "nd value;Fund Available;Fund Reserved;Fund Settled;Fund Balanced;Fund Reserved", "Fund ID;Fund description;Reason type;ID Bucket;Descr. Bucket;ID Transaction;Des. " +
            "Transaction;Reason;Transaction type;Movement value;Settled Value;Logged user;Dat" +
            "e Movement;Division;Holder", null)]
        public virtual void WEB_TPM_SP_NAVIGATORS_CHECKS_001(
                    string pROMO_ACTION, 
                    string link, 
                    string pROMO_ACTION_PER_SCENARIO, 
                    string cHILD_PROMO_HOLDERS, 
                    string dEF_WEEK_SPLIT_DRIVER, 
                    string aNOM_REPORT, 
                    string openDetail, 
                    string sHIPTO_CUST_PROD, 
                    string kPIS_SUMMARY, 
                    string iNDIRECT_CUST, 
                    string pROMO_PLAN, 
                    string sideMenuVoices, 
                    string sideMenuVoices2, 
                    string sideMenuVoices3, 
                    string sideMenuVoices4, 
                    string sideMenuVoices5, 
                    string sideMenuVoices6, 
                    string sideMenuVoices7, 
                    string fUNDANDRULES, 
                    string fUNDANDRULES_HOLDER, 
                    string cONFIGURATION, 
                    string fUND_CHECK_BOOK, 
                    string fUND_DETAILED_CHECK_BOOK, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BDD_416948",
                    "PROMO_Nightly",
                    "FundsAndRules"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PROMO_ACTION", pROMO_ACTION);
            argumentsOfScenario.Add("link", link);
            argumentsOfScenario.Add("PROMO_ACTION_PER_SCENARIO", pROMO_ACTION_PER_SCENARIO);
            argumentsOfScenario.Add("CHILD_PROMO_HOLDERS", cHILD_PROMO_HOLDERS);
            argumentsOfScenario.Add("DEF_WEEK_SPLIT_DRIVER", dEF_WEEK_SPLIT_DRIVER);
            argumentsOfScenario.Add("ANOM_REPORT", aNOM_REPORT);
            argumentsOfScenario.Add("openDetail", openDetail);
            argumentsOfScenario.Add("SHIPTO_CUST_PROD", sHIPTO_CUST_PROD);
            argumentsOfScenario.Add("KPIS_SUMMARY", kPIS_SUMMARY);
            argumentsOfScenario.Add("INDIRECT_CUST", iNDIRECT_CUST);
            argumentsOfScenario.Add("PROMO_PLAN", pROMO_PLAN);
            argumentsOfScenario.Add("sideMenuVoices", sideMenuVoices);
            argumentsOfScenario.Add("sideMenuVoices2", sideMenuVoices2);
            argumentsOfScenario.Add("sideMenuVoices3", sideMenuVoices3);
            argumentsOfScenario.Add("sideMenuVoices4", sideMenuVoices4);
            argumentsOfScenario.Add("sideMenuVoices5", sideMenuVoices5);
            argumentsOfScenario.Add("sideMenuVoices6", sideMenuVoices6);
            argumentsOfScenario.Add("sideMenuVoices7", sideMenuVoices7);
            argumentsOfScenario.Add("FUNDANDRULES", fUNDANDRULES);
            argumentsOfScenario.Add("FUNDANDRULES_HOLDER", fUNDANDRULES_HOLDER);
            argumentsOfScenario.Add("CONFIGURATION", cONFIGURATION);
            argumentsOfScenario.Add("FUND_CHECK_BOOK", fUND_CHECK_BOOK);
            argumentsOfScenario.Add("FUND_DETAILED_CHECK_BOOK", fUND_DETAILED_CHECK_BOOK);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WEB_TPM_SP_NAVIGATORS_CHECKS_001", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("the user navigates to the \'Promotional actions\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.Then(string.Format("the user validates that the \'Basic Grid Column\' with value \'{0}\' is present", pROMO_ACTION), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 10
 testRunner.And("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.When("the user clicks on \'Select Row Checkbox\' with value \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.And("the user clicks on \'Button\' with value \'Links\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And("the user clicks on \'Text\' with value \'Customer (promo holder)\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.Then("the user validates that the \'Alert Dialog Message Box\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
 testRunner.When("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.Then("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
 testRunner.When("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.And("the user clicks on \'Button\' with value \'Links\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.And("the user clicks on \'Text\' with value \'Customer (Ship-To(s))\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.Then("the user validates that the \'Alert Dialog Message Box\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
 testRunner.When("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
 testRunner.Then("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
 testRunner.When("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
 testRunner.And("the user clicks on \'Button\' with value \'Links\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And("the user clicks on \'Text\' with value \'Child promo holders\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.Then("the user validates that the \'Alert Dialog Message Box\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
 testRunner.When("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
 testRunner.Then(string.Format("the user validates that the \'Basic Grid Column\' with value \'{0}\' is present", cHILD_PROMO_HOLDERS), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
 testRunner.When("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
 testRunner.And("the user clicks on \'Button\' with value \'Links\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And("the user clicks on \'Text\' with value \'Matched Claims\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.Then("the user validates that the \'Alert Dialog Message Box\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
 testRunner.When("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
 testRunner.Then("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
 testRunner.When("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.And("the user clicks on \'Button\' with value \'Links\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.And("the user clicks on \'Text\' with value \'Matched Claims - Promotions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.Then("the user validates that the \'Alert Dialog Message Box\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
 testRunner.When("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
 testRunner.And("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.And("the user clicks on \'Indexed Row Link\' with value \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Links\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
 testRunner.And("the user clicks on \'Top Tab\' with value \'Customer (Ship-To(s))\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.Then("the user validates that the \'Alert Dialog Message Box\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
 testRunner.When("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 49
 testRunner.Then("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
 testRunner.When("the user clicks on \'Top Tab\' with value \'Customer (promo holder)\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
 testRunner.Then("the user validates that the \'Alert Dialog Message Box\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
 testRunner.When("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.Then("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.When("the user clicks on \'Top Tab\' with value \'Child promo holders\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
 testRunner.Then("the user validates that the \'Alert Dialog Message Box\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
 testRunner.When("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
 testRunner.Then("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 58
 testRunner.And(string.Format("the user validates that the \'Basic Grid Column\' with value \'{0}\' is present", cHILD_PROMO_HOLDERS), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.When("the user clicks on \'Top Tab\' with value \'Matched Claims\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
 testRunner.Then("the user validates that the \'Alert Dialog Message Box\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
 testRunner.When("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
 testRunner.Then("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 63
 testRunner.When("the user clicks on \'Top Tab\' with value \'Matched Claims - Promotions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 64
 testRunner.Then("the user validates that the \'Alert Dialog Message Box\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 65
 testRunner.When("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
 testRunner.Then("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
 testRunner.When("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 70
 testRunner.And("the user navigates to the \'Promotional actions per scenario\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
 testRunner.And("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.Then("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
 testRunner.And(string.Format("the user validates that the \'Basic Grid Column\' with value \'{0}\' is present", pROMO_ACTION_PER_SCENARIO), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
 testRunner.When("the user clicks on \'Indexed Row Link\' with value \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
 testRunner.Then("the user validates that the \'Alert Dialog Message Box\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 79
 testRunner.When("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
 testRunner.And("the user navigates to the \'Child promo holders\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
 testRunner.And("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
 testRunner.Then(string.Format("the user validates that the \'Basic Grid Column\' with value \'{0}\' is present", cHILD_PROMO_HOLDERS), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
 testRunner.And("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.When("the user clicks on \'Button\' with value \'Links\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 89
 testRunner.And("the user clicks on \'Text\' with value \'Customer Master\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
 testRunner.Then("the user validates that the \'Alert Dialog Message Box\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
 testRunner.And("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
 testRunner.When("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 93
 testRunner.And("the user clicks on \'Button\' with value \'Links\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
 testRunner.And("the user clicks on \'Text\' with value \'Promotional actions\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
 testRunner.Then("the user validates that the \'Alert Dialog Message Box\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
 testRunner.And("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
 testRunner.When("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
 testRunner.When("the user navigates to the \'Default Week Split Driver\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 100
 testRunner.And("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
 testRunner.Then(string.Format("the user validates that the \'Basic Grid Column\' with value \'{0}\' is present", dEF_WEEK_SPLIT_DRIVER), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 103
 testRunner.And("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
 testRunner.When("the user navigates to the \'Anomaly report\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 106
 testRunner.And("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
 testRunner.Then(string.Format("the user validates that the \'Basic Grid Column\' with value \'{0}\' is present", aNOM_REPORT), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 109
 testRunner.And("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
 testRunner.When("the user clicks on \'Select Indexed Row\' with value \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 112
 testRunner.And("the user clicks on \'Button Link\' with value \'Open Detail\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
 testRunner.Then("the user validates that the \'Side Panel Tab\' with value \'Cockpit\' is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 114
 testRunner.When("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
 testRunner.When("the user navigates to the \'Ship-to customers/Products\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 117
 testRunner.And("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
 testRunner.Then(string.Format("the user validates that the \'Basic Grid Column\' with value \'{0}\' is present", sHIPTO_CUST_PROD), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 120
 testRunner.And("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 122
 testRunner.When("the user navigates to the \'KPIs summary\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 123
 testRunner.And("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
 testRunner.Then(string.Format("the user validates that the \'Basic Grid Column\' with value \'{0}\' is present", kPIS_SUMMARY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
 testRunner.And("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
 testRunner.When("the user navigates to the \'Indirect Customers\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 129
 testRunner.And("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
 testRunner.Then(string.Format("the user validates that the \'Basic Grid Column\' with value \'{0}\' is present", iNDIRECT_CUST), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 132
 testRunner.And("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 134
 testRunner.When("the user navigates to the \'Promo plan\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 135
 testRunner.And("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 137
 testRunner.Then(string.Format("the user validates that the \'Basic Grid Column\' with value \'{0}\' is present", pROMO_PLAN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 138
 testRunner.And("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
 testRunner.When("the user retrieves text in cell with column \'CUSTOMER\' and row text \'#1\' and save" +
                        "s as \'Customer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 142
 testRunner.And("the user retrieves text in cell with column \'Year of Reference\' and row text \'#1\'" +
                        " and saves as \'YearofReference\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
 testRunner.And("the user clicks on \'Indexed Row Link\' with value \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
 testRunner.Then("the user validates that the \'Alert Dialog Message Box\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 147
 testRunner.And("the user validates that the \'Toolbar Page Name\' with value \'Customer\' is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 148
 testRunner.And("the user validates that the \'Toolbar Page Name\' with value \'YearofReference\' is p" +
                        "resent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 150
 testRunner.When("the user clicks on the \'Home Toolbar Docs Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 151
 testRunner.Then("\'Home Toolbar Docs\' text with value \'Promo Plan\' contains \'Customer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 152
 testRunner.And("\'Home Toolbar Docs\' text with value \'Promo Plan\' contains \'YearofReference\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
 testRunner.When("the user clicks on the \'Body\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 155
 testRunner.Then(string.Format("the user validates that the value \'Active Side Panel Tab\' is equal to \'{0}\'", sideMenuVoices), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 156
 testRunner.And(string.Format("the user validates that the \'Side Panel Tab\' with value \'{0}\' is present", sideMenuVoices2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 157
 testRunner.And(string.Format("the user validates that the \'Side Panel Tab\' with value \'{0}\' is present", sideMenuVoices3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 158
 testRunner.And(string.Format("the user validates that the \'Side Panel Tab\' with value \'{0}\' is present", sideMenuVoices4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 159
 testRunner.And(string.Format("the user validates that the \'Side Panel Tab\' with value \'{0}\' is present", sideMenuVoices5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 160
 testRunner.And(string.Format("the user validates that the \'Side Panel Tab\' with value \'{0}\' is present", sideMenuVoices6), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 161
 testRunner.And(string.Format("the user validates that the \'Side Panel Tab\' with value \'{0}\' is present", sideMenuVoices7), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 162
 testRunner.And("the user validates that the \'Side Panel Button\' with value \'Collapse\' is not disp" +
                        "layed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 163
 testRunner.And("the user validates that the \'Side Panel Button\' with value \'Expand\' is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 164
 testRunner.When("the user clicks on \'Side Panel Button\' with value \'Expand\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 165
 testRunner.Then("the user validates that the \'Side Panel Button\' with value \'Collapse\' is displaye" +
                        "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 166
 testRunner.And("the user validates that the \'Side Panel Button\' with value \'Expand\' is not displa" +
                        "yed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 168
 testRunner.When("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 170
 testRunner.When("the user navigates to the \'Funds & Rules\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 171
 testRunner.And("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 173
 testRunner.Then(string.Format("the user validates that the \'Basic Grid Column\' with value \'{0}\' is present", fUNDANDRULES), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 174
 testRunner.And("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 176
 testRunner.When("the user clicks on \'Select Indexed Row\' with value \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 177
 testRunner.And("the user clicks on \'Button\' with value \'Links\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 178
 testRunner.And("the user clicks on \'Text\' with value \'Funds & Rules holder\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 179
 testRunner.Then("the user validates that the \'Alert Dialog Message Box\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 181
 testRunner.When("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 182
 testRunner.Then(string.Format("the user validates that the \'Basic Grid Column\' with value \'{0}\' is present", fUNDANDRULES_HOLDER), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 183
 testRunner.And("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 185
 testRunner.When("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 186
 testRunner.And("the user clicks on the \'Add Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 187
 testRunner.And(string.Format("the user select value \'{0}\' from dropdown list \'Configuration ID\'", cONFIGURATION), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 188
 testRunner.And("the user clicks on \'Popup Ok Button\' with value \'[New Fund&Rules]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 190
 testRunner.Then("the user validates that the \'Alert Dialog Message Box\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 192
 testRunner.When("the user closes all pages without saving the work done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 194
 testRunner.And("the user navigates to the \'Fund Check Book\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 195
 testRunner.And("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 197
 testRunner.Then(string.Format("the user validates that the \'Basic Grid Column\' with value \'{0}\' is present", fUND_CHECK_BOOK), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 198
 testRunner.And("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
 testRunner.When("the user clicks on \'Select Indexed Row\' with value \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 201
 testRunner.And("the user clicks on \'Button\' with value \'Links\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 202
 testRunner.And("the user clicks on \'Text\' with value \'Fund Detailed Check Book\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 203
 testRunner.Then("the user validates that the \'Alert Dialog Message Box\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 205
 testRunner.When("the user makes all coumns visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 206
 testRunner.Then(string.Format("the user validates that the \'Basic Grid Column\' with value \'{0}\' is present", fUND_DETAILED_CHECK_BOOK), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 207
 testRunner.And("user validates that the columns for \'Basic Grid Column\' do not start with \'[\' and" +
                        " end with \']\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 209
 testRunner.And("the user validates that the \'Select Indexed Row\' with value \'1\' is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 210
 testRunner.When("the user closes all pages without saving the work done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
