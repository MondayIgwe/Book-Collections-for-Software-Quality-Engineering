// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kantar_BDD.Features.TPM.PromoActions
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestCase_344841")]
    public partial class TestCase_344841Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TestCase_344841.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/TPM/PromoActions", "TestCase_344841", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TPM_SP_W_SMOKE_R80V1_0013 - Mass Copy")]
        [NUnit.Framework.CategoryAttribute("BDD_344841")]
        [NUnit.Framework.CategoryAttribute("PROMO_Nightly")]
        [NUnit.Framework.CategoryAttribute("PromoActions")]
        [NUnit.Framework.TestCaseAttribute("AUTOM2", "EC94440", "Holder Level", "Level 2", "Draft", "d/m/y", "x/x/y", "d+10/m/y", "d/m+3/y", "d+10/m+3/y", "Leaflet", "021", "100", "D001", "50", "100", "EC86262", "Actual", "052", "EC86269", "Confirm", "EC86271", "Closed", "Days", "Weeks", "Months", "12", "off", "Leaflet", "", "", null)]
        public virtual void TPM_SP_W_SMOKE_R80V1_0013_MassCopy(
                    string dIVISION, 
                    string cUST, 
                    string cONFLEV, 
                    string cUSTLEV, 
                    string pROMODESC1, 
                    string sELLINSTART, 
                    string rEFYEAR, 
                    string sELLINEND, 
                    string cOPY_SELLINSTART, 
                    string cOPY_SELLINEND, 
                    string mECH, 
                    string pRODCODE, 
                    string qTYESTIMATED, 
                    string pRODDESC, 
                    string dISPQTY, 
                    string leaflet, 
                    string cUST2, 
                    string pROMODESC2, 
                    string pRODCODE2, 
                    string cUST3, 
                    string pROMODESC3, 
                    string cUST4, 
                    string pROMODESC4, 
                    string unitsShift_1, 
                    string unitsShift_2, 
                    string unitsShift_3, 
                    string periodsShift, 
                    string keepDay, 
                    string mECH_FUND_INJ, 
                    string sELLOUTSTARTDATE, 
                    string sELLOUTENDDATE, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BDD_344841",
                    "PROMO_Nightly",
                    "PromoActions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DIVISION", dIVISION);
            argumentsOfScenario.Add("CUST", cUST);
            argumentsOfScenario.Add("CONFLEV", cONFLEV);
            argumentsOfScenario.Add("CUSTLEV", cUSTLEV);
            argumentsOfScenario.Add("PROMODESC1", pROMODESC1);
            argumentsOfScenario.Add("SELLINSTART", sELLINSTART);
            argumentsOfScenario.Add("REFYEAR", rEFYEAR);
            argumentsOfScenario.Add("SELLINEND", sELLINEND);
            argumentsOfScenario.Add("COPY_SELLINSTART", cOPY_SELLINSTART);
            argumentsOfScenario.Add("COPY_SELLINEND", cOPY_SELLINEND);
            argumentsOfScenario.Add("MECH", mECH);
            argumentsOfScenario.Add("PRODCODE", pRODCODE);
            argumentsOfScenario.Add("QTYESTIMATED", qTYESTIMATED);
            argumentsOfScenario.Add("PRODDESC", pRODDESC);
            argumentsOfScenario.Add("DISPQTY", dISPQTY);
            argumentsOfScenario.Add("Leaflet", leaflet);
            argumentsOfScenario.Add("CUST2", cUST2);
            argumentsOfScenario.Add("PROMODESC2", pROMODESC2);
            argumentsOfScenario.Add("PRODCODE2", pRODCODE2);
            argumentsOfScenario.Add("CUST3", cUST3);
            argumentsOfScenario.Add("PROMODESC3", pROMODESC3);
            argumentsOfScenario.Add("CUST4", cUST4);
            argumentsOfScenario.Add("PROMODESC4", pROMODESC4);
            argumentsOfScenario.Add("unitsShift_1", unitsShift_1);
            argumentsOfScenario.Add("unitsShift_2", unitsShift_2);
            argumentsOfScenario.Add("unitsShift_3", unitsShift_3);
            argumentsOfScenario.Add("periodsShift", periodsShift);
            argumentsOfScenario.Add("KeepDay", keepDay);
            argumentsOfScenario.Add("MECH_FUND_INJ", mECH_FUND_INJ);
            argumentsOfScenario.Add("SELLOUTSTARTDATE", sELLOUTSTARTDATE);
            argumentsOfScenario.Add("SELLOUTENDDATE", sELLOUTENDDATE);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TPM_SP_W_SMOKE_R80V1_0013 - Mass Copy", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("the user navigates to the \'Promotional actions\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When(string.Format("the user creates a Promo \'{0}\' \'{1}\'", cUSTLEV, cUST), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.And(string.Format("the user populates the cockpit \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\' \'{5}\'", pROMODESC1, sELLINSTART, sELLINEND, sELLOUTSTARTDATE, sELLOUTENDDATE, mECH), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Cockpit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And("the user retrieves text from element \'Input By Label Name\' with value \'Action Id\'" +
                        " and saves it as \'ActionId1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And(string.Format("the user adds a product \'Product\' \'{0}\'", pRODCODE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Estimated quantity\' for product code \'{1}\'", qTYESTIMATED, pRODCODE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Leaflet\' for product code \'{1}\'", leaflet, pRODCODE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.And(string.Format("the user adds a product \'Display\' \'{0}\'", pRODDESC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Display estimated quantity\' for product cod" +
                            "e \'{1}\'", dISPQTY, pRODDESC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Leaflet\' for product code \'{1}\'", leaflet, pRODDESC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And("the user clicks on the \'Save Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.And(string.Format("the user creates a Promo \'{0}\' \'{1}\'", cUSTLEV, cUST2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.And(string.Format("the user populates the cockpit \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\' \'{5}\'", pROMODESC2, sELLINSTART, sELLINEND, sELLOUTSTARTDATE, sELLOUTENDDATE, mECH), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Cockpit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.And("the user retrieves text from element \'Input By Label Name\' with value \'Action Id\'" +
                        " and saves it as \'ActionId2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And(string.Format("the user adds a product \'Product\' \'{0}\'", pRODCODE2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Estimated quantity\' for product code \'{1}\'", qTYESTIMATED, pRODCODE2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Leaflet\' for product code \'{1}\'", leaflet, pRODCODE2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Cockpit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And("the user changes the status to \'To be authorized\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And("the user changes the status to \'Confirm\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And("the user changes the status to \'Actual\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And("the user clicks on the \'Save Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.And("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.And(string.Format("the user creates a Promo \'{0}\' \'{1}\'", cUSTLEV, cUST3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.And(string.Format("the user populates the cockpit \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\' \'{5}\'", pROMODESC3, sELLINSTART, sELLINEND, sELLOUTSTARTDATE, sELLOUTENDDATE, mECH), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Cockpit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.And("the user retrieves text from element \'Input By Label Name\' with value \'Action Id\'" +
                        " and saves it as \'ActionId3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And(string.Format("the user adds a product \'Product\' \'{0}\'", pRODCODE2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Estimated quantity\' for product code \'{1}\'", qTYESTIMATED, pRODCODE2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Leaflet\' for product code \'{1}\'", leaflet, pRODCODE2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Cockpit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.And("the user changes the status to \'To be authorized\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.And("the user changes the status to \'Confirm\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.And("the user clicks on the \'Save Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
 testRunner.And("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.And(string.Format("the user creates a Promo \'{0}\' \'{1}\'", cUSTLEV, cUST4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.And(string.Format("the user populates the cockpit \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\' \'{5}\'", pROMODESC4, sELLINSTART, sELLINEND, sELLOUTSTARTDATE, sELLOUTENDDATE, mECH), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Cockpit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.And("the user retrieves text from element \'Input By Label Name\' with value \'Action Id\'" +
                        " and saves it as \'ActionId4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.And(string.Format("the user adds a product \'Product\' \'{0}\'", pRODCODE2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Estimated quantity\' for product code \'{1}\'", qTYESTIMATED, pRODCODE2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Leaflet\' for product code \'{1}\'", leaflet, pRODCODE2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Cockpit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
 testRunner.And("the user changes the status to \'Cancelled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.And("the user clicks on the \'Save Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.And("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.And("the user clicks on the \'Refresh Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.And("the user clicks on \'Grid CheckBox\' with value \'ActionId1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.And("the user clicks on \'Grid CheckBox\' with value \'ActionId2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.And("the user clicks on \'Grid CheckBox\' with value \'ActionId3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And("the user clicks on \'Grid CheckBox\' with value \'ActionId4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
 testRunner.And("the user clicks on \'Button Link\' with value \'Mass copying\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
 testRunner.Then("the user validates that the \'Generic Drop Down Trigger\' with value \'Units to shif" +
                        "t\' is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
 testRunner.When(string.Format("the user clicks on \'Generic Drop Down Trigger\' with value \'Units to shift\' until " +
                            "\'List\' with value \'{0}\' is present", unitsShift_1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
 testRunner.Then(string.Format("the user validates that the \'List\' with value \'{0}\' is present", unitsShift_1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
 testRunner.And(string.Format("the user validates that the \'List\' with value \'{0}\' is present", unitsShift_2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.And(string.Format("the user validates that the \'List\' with value \'{0}\' is present", unitsShift_3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
 testRunner.And(string.Format("the user validates that \'Input By Label Name\' with value \'Period to shift\' has te" +
                            "xt \'{0}\'", periodsShift), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
 testRunner.When("the user clicks on \'Input By Label Name\' with value \'Period to shift\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
 testRunner.Then("the user validates that the checkbox container \'sm1-tr contianer\' with value \'[GU" +
                        "IPROMOACTIONMASSCOPY.KEEPDAY]\' is set to the state: \'<keepDay>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 79
 testRunner.And("the user validates that the \'Text in Grid\' with value \'ActionId1\' is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
 testRunner.And("the user validates that the \'Text in Grid\' with value \'ActionId2\' is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
 testRunner.And("the user validates that the \'Text in Grid\' with value \'ActionId3\' is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
 testRunner.And("the user validates that the \'Text in Grid\' with value \'ActionId4\' is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
 testRunner.When("the user clicks on \'Grid CheckBox\' with value \'ActionId1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 85
 testRunner.And("the user clicks on \'Grid CheckBox\' with value \'ActionId2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
 testRunner.And("the user clicks on \'Grid CheckBox\' with value \'ActionId3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.And("the user clicks on \'Grid CheckBox\' with value \'ActionId4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.And("the user clicks on \'Button\' with value \'Execute Copy\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
 testRunner.Then("the user validates that the \'Text\' with value \'At least one promotion must be sel" +
                        "ected in order to perform the copy.\' is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
 testRunner.When("the user clicks on \'Grid CheckBox\' with value \'ActionId1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 94
 testRunner.And("the user clicks on \'Grid CheckBox\' with value \'ActionId2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
 testRunner.And("the user clicks on \'Grid CheckBox\' with value \'ActionId3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
 testRunner.And("the user clicks on \'Grid CheckBox\' with value \'ActionId4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
 testRunner.And("the user enters \'3\' in field \'Input By Label Name\' with value \'Period to shift\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
 testRunner.And("the user clicks on \'Button\' with value \'Execute Copy\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 101
 testRunner.Then("the user validates that column \'Copy result\' has \'Success\' with row text \'ActionI" +
                        "d1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
 testRunner.And("the user validates that column \'Copy result\' has \'Success\' with row text \'ActionI" +
                        "d2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.And("the user validates that column \'Copy result\' has \'Success\' with row text \'ActionI" +
                        "d3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
 testRunner.And("the user validates that column \'Copy result\' has \'Success\' with row text \'ActionI" +
                        "d4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
 testRunner.Then("the user validates that column \'Blocking Anomalies\' has \'\' with row text \'ActionI" +
                        "d1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 106
 testRunner.And("the user validates that column \'Blocking Anomalies\' has \'\' with row text \'ActionI" +
                        "d2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
 testRunner.And("the user validates that column \'Blocking Anomalies\' has \'\' with row text \'ActionI" +
                        "d3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
 testRunner.And("the user validates that column \'Blocking Anomalies\' has \'\' with row text \'ActionI" +
                        "d4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
 testRunner.When("the user retrieves text from column \'Generated Action Code\' with unique row text " +
                        "\'ActionId1\' and saves it as \'GeneratedActionId1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 111
 testRunner.And("the user retrieves text from column \'Generated Action Code\' with unique row text " +
                        "\'ActionId2\' and saves it as \'GeneratedActionId2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
 testRunner.And("the user retrieves text from column \'Generated Action Code\' with unique row text " +
                        "\'ActionId3\' and saves it as \'GeneratedActionId3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
 testRunner.And("the user retrieves text from column \'Generated Action Code\' with unique row text " +
                        "\'ActionId4\' and saves it as \'GeneratedActionId4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
 testRunner.And("the user clicks on link on column \'Generated Action Code\' with row text \'ActionId" +
                        "1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Products\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
 testRunner.And("the user clicks on the \'Product Grid Select Measures\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 117
 testRunner.And("the user clicks on \'List\' with value \'All\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
 testRunner.Then(string.Format("the user validates text contains \'0\' on column name \'Display estimated quantity\' " +
                            "for product code \'{0}\'", pRODCODE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 123
 testRunner.When("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 124
 testRunner.And("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
 testRunner.And("the user clicks on the \'Refresh Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
 testRunner.And("the user filters the column by column name \'Action code\', \'Like\', \'GeneratedActio" +
                        "nId1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
 testRunner.Then(string.Format("the user validates that column \'Sell-in start\' has \'{0}\' with row text \'Generated" +
                            "ActionId1\'", cOPY_SELLINSTART), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 128
 testRunner.When("the user filters the column by column name \'Action code\', \'Like\', \'GeneratedActio" +
                        "nId2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 129
 testRunner.Then(string.Format("the user validates that column \'Sell-in start\' has \'{0}\' with row text \'Generated" +
                            "ActionId2\'", cOPY_SELLINSTART), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 130
 testRunner.When("the user filters the column by column name \'Action code\', \'Like\', \'GeneratedActio" +
                        "nId3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 131
 testRunner.Then(string.Format("the user validates that column \'Sell-in start\' has \'{0}\' with row text \'Generated" +
                            "ActionId3\'", cOPY_SELLINSTART), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 132
 testRunner.When("the user filters the column by column name \'Action code\', \'Like\', \'GeneratedActio" +
                        "nId4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 133
 testRunner.Then(string.Format("the user validates that column \'Sell-in start\' has \'{0}\' with row text \'Generated" +
                            "ActionId4\'", cOPY_SELLINSTART), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
