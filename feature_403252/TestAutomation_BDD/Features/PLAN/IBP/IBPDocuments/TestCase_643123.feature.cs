// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kantar_BDD.Features.PLAN.IBP.IBPDocuments
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestCase_643123")]
    public partial class TestCase_643123Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TestCase_643123.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/PLAN/IBP/IBPDocuments", "TestCase_643123", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("WEB_TPM_IBP_APPLY_VALUE_ROL_MEAS_NOTAGG_009-US425392-AC6-Example 1")]
        [NUnit.Framework.CategoryAttribute("BDD_643123")]
        [NUnit.Framework.CategoryAttribute("PLAN_Nightly")]
        [NUnit.Framework.CategoryAttribute("PLAN")]
        [NUnit.Framework.TestCaseAttribute("CBP_2020", "SHELL_ROLMEAS", "41", "10", "SC_ROLMEAS_NOTAGG", "142", "EC93849_4", "M5", "M6", "[FLT_ROLMEAS_CUST]", "[FLT_ROLMEAS_MONTH]", "[FLT_ROLMEAS_MEAS2]", "MEAS1_ROL", "MEAS2_ROL", "GRID_FR_ROLMEAS_NOTAGG", "07.5", "Block", "Cell(s)", "Apply value", "T2", null)]
        public virtual void WEB_TPM_IBP_APPLY_VALUE_ROL_MEAS_NOTAGG_009_US425392_AC6_Example1(
                    string docProcessYear, 
                    string docShellModel, 
                    string docWeek, 
                    string docMonth, 
                    string sectionName, 
                    string documentID, 
                    string customer, 
                    string month1, 
                    string month2, 
                    string fLT_Rolmeas_Customer, 
                    string fLT_Rolmeas_Month, 
                    string fLT_Rolmeas_Meas2, 
                    string meas1, 
                    string measure, 
                    string gridName, 
                    string prodCell, 
                    string block, 
                    string blockType, 
                    string applyValue, 
                    string quarter, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BDD_643123",
                    "PLAN_Nightly",
                    "PLAN"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DocProcessYear", docProcessYear);
            argumentsOfScenario.Add("DocShellModel", docShellModel);
            argumentsOfScenario.Add("DocWeek", docWeek);
            argumentsOfScenario.Add("DocMonth", docMonth);
            argumentsOfScenario.Add("SectionName", sectionName);
            argumentsOfScenario.Add("DocumentID", documentID);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Month1", month1);
            argumentsOfScenario.Add("Month2", month2);
            argumentsOfScenario.Add("FLT_Rolmeas_Customer", fLT_Rolmeas_Customer);
            argumentsOfScenario.Add("FLT_Rolmeas_Month", fLT_Rolmeas_Month);
            argumentsOfScenario.Add("FLT_Rolmeas_Meas2", fLT_Rolmeas_Meas2);
            argumentsOfScenario.Add("Meas1", meas1);
            argumentsOfScenario.Add("Measure", measure);
            argumentsOfScenario.Add("GridName", gridName);
            argumentsOfScenario.Add("ProdCell", prodCell);
            argumentsOfScenario.Add("Block", block);
            argumentsOfScenario.Add("BlockType", blockType);
            argumentsOfScenario.Add("ApplyValue", applyValue);
            argumentsOfScenario.Add("Quarter", quarter);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WEB_TPM_IBP_APPLY_VALUE_ROL_MEAS_NOTAGG_009-US425392-AC6-Example 1", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("the user navigates to the \'IBP Documents\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When(string.Format("the user filters the column by column name \'Process Year\', \'Like\', \'{0}\'", docProcessYear), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.And(string.Format("the user filters the column by column name \'Month\', \'Equal\', \'{0}\'", docMonth), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And(string.Format("the user filters the column by column name \'Week\', \'Equal\', \'{0}\'", docWeek), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And(string.Format("the user filters the column by column name \'Document Shell Model\', \'Like\', \'{0}\'", docShellModel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And(string.Format("the user clicks on \'{0}\' text on the grid", documentID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.Then("the user is on the \'Summary Tab\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
 testRunner.When(string.Format("the user selects a section \'{0}\' in IBP Summary Tab", sectionName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.Then("the user is on the \'Shell Tab\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
 testRunner.When(string.Format("the user changes the filter on \'{0}\' to \'{1}\' and filters with \'User Code\', \'Like" +
                            "\' in the IBP Shell Tab", fLT_Rolmeas_Customer, customer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.And(string.Format("the user changes the filter on \'{0}\' to \'{1}\' and filters with \'User Code\', \'Like" +
                            "\' in the IBP Shell Tab", fLT_Rolmeas_Month, month1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.And(string.Format("the user changes the filter on \'{0}\' to \'{1}\' and filters with \'User Code\', \'Like" +
                            "\' in the IBP Shell Tab", fLT_Rolmeas_Month, month2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.And(string.Format("the user changes the filter on \'{0}\' to \'{1}\' and filters with \'User Code\', \'Like" +
                            "\' in the IBP Shell Tab", fLT_Rolmeas_Meas2, meas1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.And(string.Format("the user changes the filter on \'{0}\' to \'{1}\' and filters with \'User Code\', \'Like" +
                            "\' in the IBP Shell Tab", fLT_Rolmeas_Meas2, measure), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And(string.Format("the user right clicks on the Aggrid Grid table at row: \'EC93849_4|07_5|MEAS2_ROL\'" +
                            " and column: \'{0}\' and selects \'Block > Cell(s)\'", month2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And(string.Format("the user right clicks on the Aggrid Grid table at row: \'EC93849_4|07_5|MEAS2_ROL\'" +
                            " and column: \'{0}\' and selects \'Apply value > New value\'", month2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.Then("the user validates that the \'Apply value > New value \' on the Aggrid Grid table a" +
                        "t row: \'EC93849_4|07_5|MEAS2_ROL\' and column: \'M6\' is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
