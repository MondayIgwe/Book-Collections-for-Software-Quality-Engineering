// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kantar_BDD.Features.SFA.Rescoped.CustomerMaster
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestCase_534951")]
    public partial class TestCase_534951Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TestCase_534951.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/SFA/Rescoped/CustomerMaster", "TestCase_534951", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("WEB_SFA_MD_CUST_UI_015_MAIN_TAB")]
        [NUnit.Framework.CategoryAttribute("BDD_TC534951")]
        [NUnit.Framework.CategoryAttribute("SFA_Nightly")]
        [NUnit.Framework.TestCaseAttribute("New customer", "United States of America", "Bill-to, Ship-to and POS", "US16", "New", "CUST_UI_016", "Strada Palat", "123456", "Iasi", "112", "112", "def@aa.ro", null)]
        public virtual void WEB_SFA_MD_CUST_UI_015_MAIN_TAB(string customerAction1, string nATION, string bILL_TO_SHIP_TO_POS, string vATCODE, string sTATUS_DES, string cUST_NAME, string aDDR, string zIP, string dESLOC, string pHONE, string fAX, string mAIL, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BDD_TC534951",
                    "SFA_Nightly"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CustomerAction1", customerAction1);
            argumentsOfScenario.Add("NATION", nATION);
            argumentsOfScenario.Add("BILL_TO_SHIP_TO_POS", bILL_TO_SHIP_TO_POS);
            argumentsOfScenario.Add("VATCODE", vATCODE);
            argumentsOfScenario.Add("STATUS_DES", sTATUS_DES);
            argumentsOfScenario.Add("CUST_NAME", cUST_NAME);
            argumentsOfScenario.Add("ADDR", aDDR);
            argumentsOfScenario.Add("ZIP", zIP);
            argumentsOfScenario.Add("DESLOC", dESLOC);
            argumentsOfScenario.Add("PHONE", pHONE);
            argumentsOfScenario.Add("FAX", fAX);
            argumentsOfScenario.Add("MAIL", mAIL);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WEB_SFA_MD_CUST_UI_015_MAIN_TAB", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("the user navigates to the \'Customer Master\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When(string.Format("the user adds a new Customer Master where Action: \'{0}\', Customer Type: \'{1}\', Na" +
                            "tion: \'{2}\', VAT Code: \'{3}\'", customerAction1, bILL_TO_SHIP_TO_POS, nATION, vATCODE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.And("the user gets the system date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Customer Code\' is v" +
                        "isible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
 testRunner.And("the user validates that the \'Mandatory Icon\' with value \'Customer Code\' is displa" +
                        "yed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And("the user validates that the \'Input By Label Name\' with value \'Customer Code\' is d" +
                        "isabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Customer Name\' is v" +
                        "isible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
 testRunner.And("the user validates that the \'Mandatory Icon\' with value \'Customer Name\' is displa" +
                        "yed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And("the user validates that the \'Input By Label Name\' with value \'Customer Name\' is e" +
                        "nabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Status\' is visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
 testRunner.And("the user validates that the \'Mandatory Icon\' with value \'Status\' is not displayed" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.And("the user validates that the \'Input By Label Name\' with value \'Status\' is disabled" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.And(string.Format("the user validates that \'Input By Label Name\' with value \'Status\' has text \'{0}\'", sTATUS_DES), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Block Reason\' is vi" +
                        "sible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.And("the user validates that the \'Mandatory Icon\' with value \'Block Reason\' is not dis" +
                        "played", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And("the user validates that the \'Input By Label Name\' with value \'Block Reason\' is di" +
                        "sabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Sales Area\' is visi" +
                        "ble", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
 testRunner.And("the user validates that the \'Mandatory Icon\' with value \'Sales Area\' is not displ" +
                        "ayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And("the user validates that the \'Input By Label Name\' with value \'Sales Area\' is enab" +
                        "led", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Customer Category\' " +
                        "is visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
 testRunner.And("the user validates that the \'Mandatory Icon\' with value \'Customer Category\' is no" +
                        "t displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.And("the user validates that the \'Input By Label Name\' with value \'Customer Category\' " +
                        "is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Chain / Banner\' is " +
                        "visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 38
 testRunner.And("the user validates that the \'Mandatory Icon\' with value \'Chain / Banner\' is not d" +
                        "isplayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And("the user validates that the \'Input By Label Name\' with value \'Chain / Banner\' is " +
                        "enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Visit Frequence\' is" +
                        " visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
 testRunner.And("the user validates that the \'Mandatory Icon\' with value \'Visit Frequence\' is not " +
                        "displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.And("the user validates that the \'Input By Label Name\' with value \'Visit Frequence\' is" +
                        " enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Last Maintenance Da" +
                        "te\' is visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
 testRunner.And("the user validates that the \'Mandatory Icon\' with value \'Last Maintenance Date\' i" +
                        "s not displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.And("the user validates that the \'Input By Label Name\' with value \'Last Maintenance Da" +
                        "te\' is disabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.And("the user validates that \'Input By Label Name\' with value \'Last Maintenance Date\' " +
                        "contains text \'DateTime\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Address\' is visible" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
 testRunner.And("the user validates that the \'Mandatory Icon\' with value \'Address\' is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And("the user validates that the \'Input By Label Name\' with value \'Address\' is enabled" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.Then("the user validates that the \'Input By Label Name\' with value \'ZIP\' is visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
 testRunner.And("the user validates that the \'Mandatory Icon\' with value \'ZIP\' is not displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.And("the user validates that the \'Input By Label Name\' with value \'ZIP\' is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Locality\' is visibl" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
 testRunner.And("the user validates that the \'Mandatory Icon\' with value \'Locality\' is not display" +
                        "ed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.And("the user validates that the \'Input By Label Name\' with value \'Locality\' is enable" +
                        "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.Then("the user validates that the \'Input By Label Name\' with value \'District\' is visibl" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
 testRunner.And("the user validates that the \'Mandatory Icon\' with value \'District\' is not display" +
                        "ed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
 testRunner.And("the user validates that the \'Input By Label Name\' with value \'District\' is enable" +
                        "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
 testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Country\' is visible" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
 testRunner.And("the user validates that the \'Mandatory Icon\' with value \'Country\' is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
 testRunner.And("the user validates that the \'Input By Label Name\' with value \'Country\' is enabled" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.And(string.Format("the user validates that \'Input By Label Name\' with value \'Country\' has text \'{0}\'" +
                            "", nATION), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
 testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Latitude\' is visibl" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
 testRunner.And("the user validates that the \'Mandatory Icon\' with value \'Latitude\' is not display" +
                        "ed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.And("the user validates that the \'Input By Label Name\' with value \'Latitude\' is disabl" +
                        "ed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
 testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Longitude\' is visib" +
                        "le", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 77
 testRunner.And("the user validates that the \'Mandatory Icon\' with value \'Longitude\' is not displa" +
                        "yed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.And("the user validates that the \'Input By Label Name\' with value \'Longitude\' is disab" +
                        "led", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
 testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Phone\' is visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 81
 testRunner.And("the user validates that the \'Mandatory Icon\' with value \'Phone\' is not displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
 testRunner.And("the user validates that the \'Input By Label Name\' with value \'Phone\' is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
 testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Fax\' is visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
 testRunner.And("the user validates that the \'Mandatory Icon\' with value \'Fax\' is not displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
 testRunner.And("the user validates that the \'Input By Label Name\' with value \'Fax\' is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.Then("the user validates that the \'Input By Label Name\' with value \'EMail\' is visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 89
 testRunner.And("the user validates that the \'Mandatory Icon\' with value \'EMail\' is not displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
 testRunner.And("the user validates that the \'Input By Label Name\' with value \'EMail\' is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
 testRunner.When("the user select value \'B2B\' from dropdown list \'Sales Area\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 94
 testRunner.And("the user select value \'AIRPORTS\' from dropdown list \'Customer Category\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
 testRunner.And("the user select value \'3A\' from dropdown list \'Chain / Banner\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
 testRunner.And("the user select value \'Bimestrial\' from dropdown list \'Visit Frequence\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
 testRunner.When(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'Customer Name\'", cUST_NAME), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
 testRunner.And(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'Address\'", aDDR), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 100
 testRunner.And(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'ZIP\'", zIP), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 101
 testRunner.And(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'Locality\'", dESLOC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
 testRunner.And(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'Phone\'", pHONE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.And(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'Fax\'", fAX), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
 testRunner.And(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'EMail\'", mAIL), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
 testRunner.When("the user clicks on \'Button\' with value \'Save\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 107
 testRunner.Then("the user validates that the \'Toast Message Field\' is visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
