// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kantar_BDD.Features.SA.NightlyRunsRecoped
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestCase589114")]
    public partial class TestCase589114Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TestCase589114.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/SA/NightlyRunsRecoped", "TestCase589114", "\tWEB_SA_AGREEMENT_REBATES_017 - Mass status change through mass copy for MP and s" +
                    "tandard rebate", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("WEB_SA_AGREEMENT_REBATES_017")]
        [NUnit.Framework.CategoryAttribute("TTC_Nightly")]
        [NUnit.Framework.CategoryAttribute("BDD_589114")]
        [NUnit.Framework.CategoryAttribute("TTC")]
        [NUnit.Framework.TestCaseAttribute("Level 4", "EC86217", "589114_code", "589114_description", "Supply", "Year End Bonuses", "Brackets", "Invoice payable", "Net sales revenue", "589114_rebate", "Brand", "01", "1000", "589114_RebateStandard", "End item", "200", "2 - Confirmed", "Process Finished", "Success", "Confirmed", null)]
        public virtual void WEB_SA_AGREEMENT_REBATES_017(
                    string customerLevel, 
                    string customerHolder, 
                    string agreementCode, 
                    string agreementDesc, 
                    string classification, 
                    string reason, 
                    string targetType, 
                    string paymentMode, 
                    string calculationBasis, 
                    string rebateDescription, 
                    string productLevel, 
                    string productCode, 
                    string lumpSum, 
                    string rebateDescription2, 
                    string paymentFrequency, 
                    string fixedAmount, 
                    string desiredTransition, 
                    string procesStatus, 
                    string processStatusDescription, 
                    string resultState, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TTC_Nightly",
                    "BDD_589114",
                    "TTC"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CustomerLevel", customerLevel);
            argumentsOfScenario.Add("CustomerHolder", customerHolder);
            argumentsOfScenario.Add("AgreementCode", agreementCode);
            argumentsOfScenario.Add("AgreementDesc", agreementDesc);
            argumentsOfScenario.Add("Classification", classification);
            argumentsOfScenario.Add("Reason", reason);
            argumentsOfScenario.Add("TargetType", targetType);
            argumentsOfScenario.Add("PaymentMode", paymentMode);
            argumentsOfScenario.Add("CalculationBasis", calculationBasis);
            argumentsOfScenario.Add("RebateDescription", rebateDescription);
            argumentsOfScenario.Add("ProductLevel", productLevel);
            argumentsOfScenario.Add("ProductCode", productCode);
            argumentsOfScenario.Add("LumpSum", lumpSum);
            argumentsOfScenario.Add("RebateDescription2", rebateDescription2);
            argumentsOfScenario.Add("PaymentFrequency", paymentFrequency);
            argumentsOfScenario.Add("FixedAmount", fixedAmount);
            argumentsOfScenario.Add("desiredTransition", desiredTransition);
            argumentsOfScenario.Add("ProcesStatus", procesStatus);
            argumentsOfScenario.Add("processStatusDescription", processStatusDescription);
            argumentsOfScenario.Add("ResultState", resultState);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WEB_SA_AGREEMENT_REBATES_017", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("the user navigates to the \'Agreements\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.When("the user clicks on the \'Add Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.Then("the user validates that the \'Popup\' with value \'New Agreement\' is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
 testRunner.When("the user clicks on \'Trigger By Field Name\' with value \'Customer Holder\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then("the user validates that the \'Popup\' with value \'Customer Plan\' is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
 testRunner.When(string.Format("the user clicks on \'Hier. level side panel\' with value \'{0}\'", customerLevel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
 testRunner.And(string.Format("the user clicks on \'{0}\' text on the grid", customerHolder), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
    testRunner.And("the user clicks on \'Popup Ok Button\' with value \'Customer Plan\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
 testRunner.Then("the user validates that the \'Popup\' with value \'New Agreement\' is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
 testRunner.When(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'Agreement Code\'", agreementCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.And(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'Agreement Descri" +
                            "ption\'", agreementDesc), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
    testRunner.And("the user clicks on \'Popup Ok Button\' with value \'New Agreement\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
    testRunner.Then("the user validates that elements \'Basic Grid Rows\' have loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
    testRunner.When("the user retrieves text from element \'Input By Label Name\' with value \'Agreement " +
                        "ID\' and saves it as \'agreementID\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
 testRunner.Then("the user validates that the \'Sub Tab Add Button\' with value \'Rebate Header\' is di" +
                        "splayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.When("the user clicks on \'Sub Tab Add Button\' with value \'Rebate Header\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
 testRunner.Then("the user validates that the \'Popup\' with value \'New Rebate:\' is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
    testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Classification\' is " +
                        "displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
 testRunner.And(string.Format("the user selects active scenario \'{0}\' from dropdown list \'Classification\'", classification), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And(string.Format("the user selects active scenario \'{0}\' from dropdown list \'Reason\'", reason), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.When(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'Target Type\'", targetType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.And(string.Format("the user selects active scenario \'{0}\' from dropdown list \'Payment Mode\'", paymentMode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.When(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'Calculation Basi" +
                            "s\'", calculationBasis), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.When(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'Description\'", rebateDescription), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
    testRunner.And("the user clicks on \'Input By Label Name\' with value \'Reason\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.And("the user clicks on \'Sub Tab Add Button\' with value \'Rebate Products:\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.When(string.Format("the user clicks on \'Hier. level side panel\' with value \'{0}\'", productLevel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
 testRunner.When(string.Format("the user filters the column by column name \'Code\', \'Like\', \'{0}\'", productCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
 testRunner.When(string.Format("the user clicks on \'{0}\' text on the grid", productCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
    testRunner.And("the user clicks on \'Popup Ok Button SM1Id\' with value \'Products\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.And(string.Format("the user in popup \'New Rebate:\' enters \'{0}\' in cell with column \'Lump Sum\' and r" +
                            "ow text \'{1}\'", lumpSum, productCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
    testRunner.And("the user clicks on \'Popup Ok Button\' with value \'New Rebate:\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
    testRunner.And("the user clicks on \'Button\' with value \'Save\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.When("the user navigates to the \'Rebates\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 49
 testRunner.When("the user clicks on the \'Add Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
 testRunner.And("the user clicks on the \'Customer Holder\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.And(string.Format("the user clicks on \'Hier. level side panel\' with value \'{0}\'", customerLevel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.And(string.Format("the user filters the column by column name \'Customer code\', \'Like\', \'{0}\'", customerHolder), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And(string.Format("the user clicks on \'{0}\' text on the grid", customerHolder), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
    testRunner.And("the user clicks on \'Popup Ok Button\' with value \'Customer Holder\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
    testRunner.Then("the user validates that the \'Popup\' with value \'New Rebate\' is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
    testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Classification\' is " +
                        "displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
 testRunner.When(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'Classification\'", classification), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
 testRunner.When(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'Reason\'", reason), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
 testRunner.When(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'Target Type\'", targetType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
    testRunner.And("the user clicks on \'Input By Label Name\' with value \'Reason\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
    testRunner.And("the user clicks on \'Popup Ok Button\' with value \'New Rebate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
    testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Rebate code\' is dis" +
                        "played", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
    testRunner.When("the user retrieves text from element \'Input By Label Name\' with value \'Rebate cod" +
                        "e\' and saves it as \'RebateCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 65
 testRunner.When(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'Data source\'", calculationBasis), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
 testRunner.When(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'Payment mode\'", paymentMode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
 testRunner.When(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'Payment Frequenc" +
                            "y\'", paymentFrequency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
    testRunner.And("the user clicks on \'Input By Label Name\' with value \'DESCRIPTION\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
 testRunner.And(string.Format("the user enters \'{0}\' in cell with column \'Fixed amount\' and row containing text " +
                            "\'0.0\'", fixedAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'General Info\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
 testRunner.When(string.Format("the user enters \'{0}\' in the \'Description field\'", rebateDescription2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
    testRunner.And("the user clicks on \'Button\' with value \'Save\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
 testRunner.When("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
 testRunner.And("the user filters the column by column name \'Agreement ID\', \'Equal\', \'agreementID\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.And(string.Format("the user retrieves text in cell with column \'Rebate code\' and row text \'{0}\' and " +
                            "saves as \'RebateCode1\'", customerHolder), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.And("the user filters the column by column name \'Rebate code\', \'Not Like\', \'RebateCode" +
                        "1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
 testRunner.And(string.Format("the user retrieves text in cell with column \'Rebate code\' and row text \'{0}\' and " +
                            "saves as \'RebateCode2\'", customerHolder), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
 testRunner.And("the user clears filter at column  \'Rebate code\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
    testRunner.And("the user selects opens the filter at column \'Rebate code\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
    testRunner.And("the user clicks on \'Filter Option\' with value \'RebateCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
    testRunner.And("the user clicks on \'Filter Option\' with value \'RebateCode1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
    testRunner.And("the user clicks on \'Filter Option\' with value \'RebateCode2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
    testRunner.And("the user clicks on \'Popup Ok Button\' with value \'Column:Rebate code\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
 testRunner.And("the user moves the focus to the \'Grid All Checkbox\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.And("the user clicks on the \'Grid All Checkbox\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
 testRunner.Then("the user validates the \'Mass Copy\' is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
 testRunner.When("the user clicks on the \'Mass Copy\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 94
 testRunner.And("the user clicks on \'Button\' with value \'Execute\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
    testRunner.Then("the user waits for \'Element by SM1Id\' with value \'EXECUTECOPY\' attribute \'aria-di" +
                        "sabled\' to be \'true\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 98
    testRunner.And("the user validates that elements \'Basic Grid Rows\' have loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
 testRunner.When("the user retrieves count of \'Basic Grid Rows\' with value \'\' and saves it as \'RowC" +
                        "ountNew\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 100
 testRunner.Then("the user validates that the element \'RowCountNew\' is equal to \'3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 101
 testRunner.When("the user clicks on \'Sub Tab\' with value \'Result Copy Rebates\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 104
 testRunner.And("the user clicks on the \'Mass Change Status\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
 testRunner.Then("the user validates that the \'Button\' with value \'Start\' is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 108
    testRunner.And("the user validates that elements \'Basic Grid Rows\' have loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
 testRunner.When("the user retrieves count of \'Basic Grid Rows\' with value \'\' and saves it as \'RowC" +
                        "ountNew\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 110
 testRunner.Then("the user validates that the element \'RowCountNew\' is equal to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 111
    testRunner.And(string.Format("the user validates that the \'Text\' with value \'{0}\' is displayed", customerHolder), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
 testRunner.And("the user clicks on \'Generic Drop Down Trigger\' with value \'Desired Transition\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
 testRunner.And(string.Format("the user clicks on \'List Containing\' with value \'{0}\'", desiredTransition), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
 testRunner.And("the user clicks on \'Button\' with value \'Start\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
    testRunner.Then("the user waits for \'Element by SM1Id\' with value \'startButton\' attribute \'aria-di" +
                        "sabled\' to be \'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 122
    testRunner.Then(string.Format("the user validates that column \'Process Status\' has \'{0}\' with row text \'{1}\'", procesStatus, customerHolder), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 123
 testRunner.And(string.Format("the user validates that column \'Process Status Description\' has \'{0}\' with row te" +
                            "xt \'{1}\'", processStatusDescription, customerHolder), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 124
 testRunner.And(string.Format("the user validates that column \'Result State\' has \'{0}\' with row text \'{1}\'", resultState, customerHolder), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
