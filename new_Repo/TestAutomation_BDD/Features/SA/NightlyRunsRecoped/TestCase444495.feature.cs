// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kantar_BDD.Features.SA.NightlyRunsRecoped
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestCase444495")]
    public partial class TestCase444495Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TestCase444495.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/SA/NightlyRunsRecoped", "TestCase444495", "\tWEB_SA_AGREEMENT_AGREEMENT DOCUMENT_CONDITIONS_004_ New MP rebate pop up - Benef" +
                    "iciary fields", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("WEB_SA_AGREEMENT_AGREEMENT DOCUMENT_CONDITIONS_004")]
        [NUnit.Framework.CategoryAttribute("TTC_Nightly")]
        [NUnit.Framework.CategoryAttribute("TTC")]
        [NUnit.Framework.CategoryAttribute("BDD_444495")]
        [NUnit.Framework.TestCaseAttribute("Level 4", "EC86217", "5", "1", "EC87003,EC87087,EC87135,EC87150", "EC87003", "EC87087", "Nielsen Area", "Equal", "Filter name_test1", "AN1 - LOMBARDY/PIEDMONT/LIGURIA/VALLE D\'AOSTA", "Filter name test_2", "Customer,Level 0,Level 1,Level 2,Level 3,Level 4,Level 5,Level 6", null)]
        public virtual void WEB_SA_AGREEMENT_AGREEMENTDOCUMENT_CONDITIONS_004(string level, string customer, string level5, string level1, string customerLevel1, string customer_1, string customer_2, string aTTRIBUTE, string @operator, string filter_Name_1, string filter_Value_2, string filter_Name_2, string customerLevels, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TTC_Nightly",
                    "TTC",
                    "BDD_444495"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Level", level);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Level5", level5);
            argumentsOfScenario.Add("Level1", level1);
            argumentsOfScenario.Add("CustomerLevel1", customerLevel1);
            argumentsOfScenario.Add("Customer_1", customer_1);
            argumentsOfScenario.Add("Customer_2", customer_2);
            argumentsOfScenario.Add("ATTRIBUTE", aTTRIBUTE);
            argumentsOfScenario.Add("Operator", @operator);
            argumentsOfScenario.Add("Filter_Name_1", filter_Name_1);
            argumentsOfScenario.Add("Filter_Value_2", filter_Value_2);
            argumentsOfScenario.Add("Filter_Name_2", filter_Name_2);
            argumentsOfScenario.Add("CustomerLevels", customerLevels);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WEB_SA_AGREEMENT_AGREEMENT DOCUMENT_CONDITIONS_004", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given("the user navigates to the \'Agreements\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.When(string.Format("the user creates a New Document \'{0}\' \'{1}\' \'\' \'\'", level, customer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
    testRunner.And("the user retrieves text from element \'Input By Label Name\' with value \'Agreement " +
                        "ID\' and saves it as \'AgreementID\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.Then("the user validates that the \'Sub Tab Add Button\' with value \'Rebate Header\' is di" +
                        "splayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
 testRunner.When("the user clicks on \'Sub Tab Add Button\' with value \'Rebate Header\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
 testRunner.Then("the user validates that the \'Popup\' with value \'New Rebate:\' is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
 testRunner.And(string.Format("the user validates that \'Input By Label Name\' with value \'Beneficiary Level\' has " +
                            "text \'{0}\'", level), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
    testRunner.And("the user validates that the \'Input By Label Name\' with value \'Hier Filter\' is ena" +
                        "bled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.And("the user validates that \'Input By Label Name\' with value \'Hier Filter\' has text \'" +
                        "No filter\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
    testRunner.And("the user validates that the \'Input By Label Name\' with value \'Customer Filter\' is" +
                        " enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.And("the user validates that \'Input By Label Name\' with value \'Customer Filter\' has te" +
                        "xt \'No filter\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.When("the user clicks on \'Trigger By Field Name\' with value \'Customer Holder\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
 testRunner.Then(string.Format("user validates that table \'Hier. level Rows\' with value \'\' contain \'{0}\'", customerLevels), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
 testRunner.When("the user clicks on \'Popup Cancel Button\' with value \'Customer Plan\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.When("the user clicks on \'Trigger By Field Name\' with value \'Hier Filter\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.Then("the user validates that the \'Popup\' with value \'Filter Maker\' is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
 testRunner.When("the user clicks on \'Element by SM1Id\' with value \'ACTION_newFilterSet\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.Then("the user validates that the \'Popup\' with value \'Customer Hierarchy Filter\' is dis" +
                        "played", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
 testRunner.When("the user retrieves count of \'Popup Filtered Rows Column Name\' with value \'Custome" +
                        "r code\' and saves it as \'RowCountNew\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
 testRunner.Then("the user validates that the \'Loading Mask\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
 testRunner.And("the user validates that the element \'RowCountNew\' is equal to \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.When("the user clicks on \'Hier. level Side Panel\' with value \'Level 5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
 testRunner.Then("the user validates that the page with \'Popup Filtered Rows Column Name\' with valu" +
                        "e \'Customer code\' is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 47
 testRunner.When("the user retrieves count of \'Popup Filtered Rows Column Name\' with value \'Custome" +
                        "r code\' and saves it as \'RowCountNew\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
 testRunner.Then("the user validates that the \'Loading Mask\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
 testRunner.Then("the user validates that the element \'RowCountNew\' is equal to \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
 testRunner.When("the user clicks on \'Hier. level Side Panel\' with value \'Level 1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.Then(string.Format("user validates that table \'Popup Filtered Rows Column Name\' with value \'Customer " +
                            "code\' contain \'{0}\'", customerLevel1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
 testRunner.When(string.Format("the user clicks on \'Grid Checkbox\' with value \'{0}\'", customer_1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
 testRunner.And(string.Format("the user clicks on \'Grid Checkbox\' with value \'{0}\'", customer_2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.And("the user clicks on \'Popup Ok Button\' with value \'Customer Hierarchy Filter\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.Then("the user validates that the \'Popup\' with value \'Customer Hierarchy Filter\' is not" +
                        " present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
 testRunner.And(string.Format("the user validates that popup with sm1 ID \'LOGICALPRIZECUSTOMERFILTERMAKERPOPUP\' " +
                            "and name \'Filter Maker\' column \'ATTRIBUTE\' has \'Code Node 1\' with row text \'{0}\'" +
                            "", customer_2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.And(string.Format("the user validates that popup with sm1 ID \'LOGICALPRIZECUSTOMERFILTERMAKERPOPUP\' " +
                            "and name \'Filter Maker\' column \'Operator\' has \'In\' with row text \'{0}\'", customer_2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And(string.Format("the user validates that popup with sm1 ID \'LOGICALPRIZECUSTOMERFILTERMAKERPOPUP\' " +
                            "and name \'Filter Maker\' column \'Value\' has \'EC87003;EC87087\' with row text \'{0}\'" +
                            "", @operator), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
 testRunner.When("the user clicks on \'Popup Ok Button\' with value \'Filter Maker\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 70
 testRunner.Then("the user validates that the \'Popup\' with value \'Save Filter (Required)\' is displa" +
                        "yed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
 testRunner.When(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'Filter Name\'", filter_Name_1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
 testRunner.And("the user moves the focus away from the element", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.When("the user clicks on \'Popup Ok Button\' with value \'Save Filter (Required)\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 74
 testRunner.Then("the user validates that the \'Popup\' with value \'Save Filter (Required)\' is not pr" +
                        "esent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 77
 testRunner.And(string.Format("\'Input By Label Name\' text with value \'Hier Filter\' contains \'{0}\'", filter_Name_1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
 testRunner.When("the user clicks on \'Trigger By Field Name\' with value \'Customer Filter\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
 testRunner.Then("the user validates that the \'Popup\' with value \'Filter Maker\' is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
 testRunner.When(string.Format("the user in popup \'Filter Maker\' enters \'{0}\' in cell with column \'Attribute\' and" +
                            " row text \'\'", aTTRIBUTE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 85
 testRunner.When(string.Format("the user in popup \'Filter Maker\' enters \'{0}\' in cell with column \'Operator\' and " +
                            "row text \'{1}\'", @operator, aTTRIBUTE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
 testRunner.When("the user clicks on \'Popup Ok Button\' with value \'Filter Maker\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 89
 testRunner.Then("the user validates that the \'Popup\' with value \'Save Filter (Required)\' is displa" +
                        "yed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 92
 testRunner.When(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'Filter Name\'", filter_Name_2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 93
 testRunner.And("the user moves the focus away from the element", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
 testRunner.When("the user clicks on \'Popup Ok Button\' with value \'Save Filter (Required)\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 95
 testRunner.Then("the user validates that the \'Popup\' with value \'Save Filter (Required)\' is not pr" +
                        "esent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
 testRunner.And(string.Format("\'Input By Label Name\' text with value \'Customer Filter\' contains \'{0}\'", filter_Name_2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
