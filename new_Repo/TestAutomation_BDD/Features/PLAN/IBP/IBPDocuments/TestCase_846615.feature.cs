// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kantar_BDD.Features.PLAN.IBP.IBPDocuments
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestCase_846615")]
    public partial class TestCase_846615Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TestCase_846615.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/PLAN/IBP/IBPDocuments", "TestCase_846615", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("WEB_TPM_IBP_Multihierarchy_ClosedPeriod_001")]
        [NUnit.Framework.CategoryAttribute("BDD_846615")]
        [NUnit.Framework.CategoryAttribute("PLAN_Nightly")]
        [NUnit.Framework.CategoryAttribute("PLAN")]
        [NUnit.Framework.TestCaseAttribute("CBPMH_2020", "SHELL_MADAMH5", "2", "1", "[GUIGWPLANDOC.SECTION4_MADAMH1]", "[FLT_FR5PROD3]", "SPW_009", "GRID_FR4_MADAMH", "EC87135_1", "100", "EC87135_1", "EC87135_1", "148", null)]
        public virtual void WEB_TPM_IBP_Multihierarchy_ClosedPeriod_001(string docProcessYear, string docShellModel, string docWeek, string docMonth, string sectionName, string filterProd, string prod, string gridName, string aggCell, string value, string aggCell2, string agCell3, string documentID, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BDD_846615",
                    "PLAN_Nightly",
                    "PLAN"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DocProcessYear", docProcessYear);
            argumentsOfScenario.Add("DocShellModel", docShellModel);
            argumentsOfScenario.Add("DocWeek", docWeek);
            argumentsOfScenario.Add("DocMonth", docMonth);
            argumentsOfScenario.Add("SectionName", sectionName);
            argumentsOfScenario.Add("FilterProd", filterProd);
            argumentsOfScenario.Add("Prod", prod);
            argumentsOfScenario.Add("GridName", gridName);
            argumentsOfScenario.Add("AggCell", aggCell);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("AggCell2", aggCell2);
            argumentsOfScenario.Add("AgCell3", agCell3);
            argumentsOfScenario.Add("DocumentID", documentID);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WEB_TPM_IBP_Multihierarchy_ClosedPeriod_001", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("the user navigates to the \'IBP Documents\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When(string.Format("the user filters the column by column name \'Process Year\', \'Like\', \'{0}\'", docProcessYear), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.And(string.Format("the user filters the column by column name \'Month\', \'Equal\', \'{0}\'", docMonth), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And(string.Format("the user filters the column by column name \'Week\', \'Equal\', \'{0}\'", docWeek), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And(string.Format("the user filters the column by column name \'Document Shell Model\', \'Like\', \'{0}\'", docShellModel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And(string.Format("the user clicks on \'{0}\' text on the grid", documentID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.Then("the user is on the \'Summary Tab\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.When(string.Format("the user selects a section \'{0}\' in IBP Summary Tab", sectionName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
 testRunner.Then("the user is on the \'Shell Tab\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
 testRunner.When(string.Format("the user changes the filter on \'{0}\' to \'{1}\' and filters with \'User Code\', \'Like" +
                            "\' in the IBP Shell Tab", filterProd, prod), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.And(string.Format("the user enters the text \'{0}\' on the Aggrid Grid table \'{1}\' at row: \'ORDER_DISC" +
                            "|SPW_009\' and column: \'EC87135_1|WM2\'", value, gridName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.Then(string.Format("the user validates on the Aggrid Grid table \'{0}\' at row: \'ORDER_DISC|SPW_009\' an" +
                            "d column: \'EC87135_1|WM2\' and has the text \'{1}\'", gridName, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
 testRunner.And("the user clicks on \'Button\' with value \'UPDATE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And("the user closes all pages without saving the work done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
