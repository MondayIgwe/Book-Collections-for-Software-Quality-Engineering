// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kantar_BDD.Features.TPM.Rebates
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestCase_308904")]
    public partial class TestCase_308904Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TestCase_308904.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/TPM/Rebates", "TestCase_308904", "\tCreate a new Rebate on Kantar", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new Rebate")]
        [NUnit.Framework.CategoryAttribute("BDD")]
        [NUnit.Framework.TestCaseAttribute("Level 2", "EC86262", "Supply", "CLASSIFICATION", "Year End Bonuses", "REASON", "Brackets", "TARGETTYPE", "Net sales revenue", "cmbCalcBaseSource", "1,000.00", "5.00", "Invoice payable", "cmbPaymentModeCockpit", "Monthly", "cmbPaymentSchemaCockpit", "Draft", null)]
        public virtual void CreateANewRebate(
                    string customerHierarchyLevel, 
                    string customerCode, 
                    string classification, 
                    string classificationSm1ID, 
                    string reason, 
                    string reasonSm1ID, 
                    string targetType, 
                    string targetTypeSm1ID, 
                    string dataSource, 
                    string calculationSm1ID, 
                    string threshold, 
                    string percentage, 
                    string paymentMode, 
                    string paymentModeSm1ID, 
                    string paymentFrequency, 
                    string paymentFrequencySM1ID, 
                    string status, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BDD"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CustomerHierarchyLevel", customerHierarchyLevel);
            argumentsOfScenario.Add("CustomerCode", customerCode);
            argumentsOfScenario.Add("Classification", classification);
            argumentsOfScenario.Add("ClassificationSm1ID", classificationSm1ID);
            argumentsOfScenario.Add("Reason", reason);
            argumentsOfScenario.Add("ReasonSm1ID", reasonSm1ID);
            argumentsOfScenario.Add("TargetType", targetType);
            argumentsOfScenario.Add("TargetTypeSm1ID", targetTypeSm1ID);
            argumentsOfScenario.Add("DataSource", dataSource);
            argumentsOfScenario.Add("CalculationSm1ID", calculationSm1ID);
            argumentsOfScenario.Add("Threshold", threshold);
            argumentsOfScenario.Add("Percentage", percentage);
            argumentsOfScenario.Add("PaymentMode", paymentMode);
            argumentsOfScenario.Add("PaymentModeSm1ID", paymentModeSm1ID);
            argumentsOfScenario.Add("PaymentFrequency", paymentFrequency);
            argumentsOfScenario.Add("PaymentFrequencySM1ID", paymentFrequencySM1ID);
            argumentsOfScenario.Add("Status", status);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new Rebate", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("the user is on the \'Rebates\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When("the user clicks on the \'Add button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.Then("the user clicks on the \'Customer Holder\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 9
 testRunner.When(string.Format("the user selects \'{0}\' in the \'Hier. level side panel\'", customerHierarchyLevel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.Then(string.Format("the user selects \'{0}\' in the \'Customer code table\'", customerCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
 testRunner.When("the user clicks on the \'OK Customer code button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
 testRunner.Then(string.Format("the user selects \'{0}\' in the dropbox \'{1}\'", classification, classificationSm1ID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
 testRunner.And(string.Format("the user selects \'{0}\' in the dropbox \'{1}\'", reason, reasonSm1ID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And(string.Format("the user selects \'{0}\' in the dropbox \'{1}\'", targetType, targetTypeSm1ID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.When("the user clicks on the \'Ok Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
 testRunner.Then("the user is on the \'Summary Tab\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
 testRunner.And("the user handles the loading screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And("the user validates that there is a rebate code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.When(string.Format("the user selects \'{0}\' in the dropbox \'{1}\'", dataSource, calculationSm1ID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.Then(string.Format("the user enters \'{0}\' under the column number \'1\' in row number \'1\' in table \'Ben" +
                            "ifits\'", threshold), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
 testRunner.And(string.Format("the user enters \'{0}\' under the column number \'2\' in row number \'1\' in table \'Ben" +
                            "ifits\'", percentage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.When(string.Format("the user selects \'{0}\' in the dropbox \'{1}\'", paymentMode, paymentModeSm1ID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
 testRunner.And(string.Format("the user selects \'{0}\' in the dropbox \'{1}\'", paymentFrequency, paymentFrequencySM1ID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.Then("the user clicks on the \'Toolbar Save Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.Then("the user clicks on the \'Toolbar Close Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.And("the user handles the loading screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.Then("the user is on the \'Rebates\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
 testRunner.When("the user selects the created rebate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
 testRunner.Then("the user is on the \'Summary Tab\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
 testRunner.Then(string.Format("the created rebate fields are populated with \'{0}\', \'{1}\', \'{2}\', \'{3}\', \'{4}\', \'" +
                            "{5}\', \'{6}\'", customerCode, status, dataSource, threshold, percentage, paymentMode, paymentFrequency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
