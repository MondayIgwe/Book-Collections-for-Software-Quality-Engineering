// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kantar_BDD.Features.PLAN.IBP.IBPDocuments
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestCase_606464")]
    public partial class TestCase_606464Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TestCase_606464.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/PLAN/IBP/IBPDocuments", "TestCase_606464", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("WEB_TPM_IBP_SPLIT_ROL_MEAS_002")]
        [NUnit.Framework.CategoryAttribute("BDD_606464")]
        [NUnit.Framework.CategoryAttribute("PLAN_Nightly")]
        [NUnit.Framework.CategoryAttribute("PLAN")]
        [NUnit.Framework.TestCaseAttribute("CBP_2020", "SHELL_ROLMEAS", "41", "10", "142", "SC_ROLMEAS_NOTAGG", "[FLT_ROLMEAS_CUST]", "[FLT_ROLMEAS_PROD]", "[FLT_ROLMEAS_MEAS2]", "[FLT_ROLMEAS_MONTH]", "EC91603_4", "08_5", "M1", "M2", "M3", "GRID_FR_ROLMEAS_NOTAGG", "MEAS1_ROL", "MEAS2_ROL", "MEAS15_ROL", "MEAS5_ROL", "MEAS6_ROL", "2020", "333", "111.11", "111.11", "-685", "222.22", "-574.77", "76,208.12", null)]
        public virtual void WEB_TPM_IBP_SPLIT_ROL_MEAS_002(
                    string docProcessYear, 
                    string docShellModel, 
                    string docWeek, 
                    string docMonth, 
                    string documentID, 
                    string sectionName, 
                    string filter, 
                    string filter1, 
                    string filter2, 
                    string filter3, 
                    string customer, 
                    string category, 
                    string month, 
                    string month1, 
                    string month2, 
                    string gridName, 
                    string measure, 
                    string measure1, 
                    string measure3, 
                    string measure4, 
                    string measure5, 
                    string year, 
                    string value, 
                    string value1, 
                    string value2, 
                    string value3, 
                    string value4, 
                    string value5, 
                    string value6, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BDD_606464",
                    "PLAN_Nightly",
                    "PLAN"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DocProcessYear", docProcessYear);
            argumentsOfScenario.Add("DocShellModel", docShellModel);
            argumentsOfScenario.Add("DocWeek", docWeek);
            argumentsOfScenario.Add("DocMonth", docMonth);
            argumentsOfScenario.Add("DocumentID", documentID);
            argumentsOfScenario.Add("SectionName", sectionName);
            argumentsOfScenario.Add("Filter", filter);
            argumentsOfScenario.Add("Filter1", filter1);
            argumentsOfScenario.Add("Filter2", filter2);
            argumentsOfScenario.Add("Filter3", filter3);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("Category", category);
            argumentsOfScenario.Add("Month", month);
            argumentsOfScenario.Add("Month1", month1);
            argumentsOfScenario.Add("Month2", month2);
            argumentsOfScenario.Add("GridName", gridName);
            argumentsOfScenario.Add("Measure", measure);
            argumentsOfScenario.Add("Measure1", measure1);
            argumentsOfScenario.Add("Measure3", measure3);
            argumentsOfScenario.Add("Measure4", measure4);
            argumentsOfScenario.Add("Measure5", measure5);
            argumentsOfScenario.Add("Year", year);
            argumentsOfScenario.Add("Value", value);
            argumentsOfScenario.Add("Value1", value1);
            argumentsOfScenario.Add("Value2", value2);
            argumentsOfScenario.Add("Value3", value3);
            argumentsOfScenario.Add("Value4", value4);
            argumentsOfScenario.Add("Value5", value5);
            argumentsOfScenario.Add("Value6", value6);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WEB_TPM_IBP_SPLIT_ROL_MEAS_002", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("the user navigates to the \'IBP Documents\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.When(string.Format("the user filters the column by column name \'Process Year\', \'Like\', \'{0}\'", docProcessYear), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.And(string.Format("the user filters the column by column name \'Month\', \'Equal\', \'{0}\'", docMonth), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And(string.Format("the user filters the column by column name \'Week\', \'Equal\', \'{0}\'", docWeek), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And(string.Format("the user filters the column by column name \'Document Shell Model\', \'Like\', \'{0}\'", docShellModel), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.And(string.Format("the user clicks on \'{0}\' text on the grid", documentID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.Then("the user is on the \'Summary Tab\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
 testRunner.When(string.Format("the user selects a section \'{0}\' in IBP Summary Tab", sectionName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.Then("the user is on the \'Shell Tab\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
 testRunner.When(string.Format("the user changes the filter on \'{0}\' to \'{1}\' and filters with \'User Code\', \'Like" +
                            "\' in the IBP Shell Tab", filter, customer), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
 testRunner.And(string.Format("the user changes the filter on \'{0}\' to \'{1}\' and filters with \'User Code\', \'Like" +
                            "\' in the IBP Shell Tab", filter1, category), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And(string.Format("the user changes the filter on \'{0}\' to \'{1}\' and filters with \'User Code\', \'Like" +
                            "\' in the IBP Shell Tab", filter3, month), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And(string.Format("the user changes the filter on \'{0}\' to \'{1}\' and filters with \'User Code\', \'Like" +
                            "\' in the IBP Shell Tab", filter3, month1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And(string.Format("the user changes the filter on \'{0}\' to \'{1}\' and filters with \'User Code\', \'Like" +
                            "\' in the IBP Shell Tab", filter3, month2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And(string.Format("the user enters the text \'{0}\' on the Aggrid Grid table \'{1}\' at row: \'EC91603_4|" +
                            "08_5|MEAS1_ROL\' and column: \'M3\'", value, gridName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.Then(string.Format("the user validates on the Aggrid Grid table \'{0}\' at row: \'EC91603_4|08_5|MEAS1_R" +
                            "OL\' and column: \'M3\' and has the text \'{1}\'", gridName, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
 testRunner.When("the user clicks on \'Button\' with value \'UPDATE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.And("the user closes all pages without saving the work done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
