// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kantar_BDD.Features.TPM.PromoActions
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestCase_512567")]
    public partial class TestCase_512567Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TestCase_512567.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/TPM/PromoActions", "TestCase_512567", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("WEB_TPM_SP_PRODSELECTOR_PROMOASSORTMENT_MANDATORY_AND_DISPLAY_001")]
        [NUnit.Framework.CategoryAttribute("BDD_512567")]
        [NUnit.Framework.CategoryAttribute("PROMO_Nightly")]
        [NUnit.Framework.CategoryAttribute("PromoActions")]
        [NUnit.Framework.TestCaseAttribute("Promotion", "Test Mandatory Assortment2", "EC86232", "051", "052", "053", "054", "055", "056", "057", "01/01/2100", "TRUE", "TPR in %", "Holder level", "Level 3", "Promo having mandatory assortment", "d+1/m/y", "d+15/m/y", "", "", "TPR in %", "D001", "D002", "D003", "D004", null)]
        public virtual void WEB_TPM_SP_PRODSELECTOR_PROMOASSORTMENT_MANDATORY_AND_DISPLAY_001(
                    string aSSOTYPE, 
                    string dESCRIPTION, 
                    string cUSTOMER, 
                    string pRODUCTS, 
                    string pRODUCTS2, 
                    string pRODUCTS3, 
                    string pRODUCTS4, 
                    string pRODUCTS5, 
                    string pRODUCTS6, 
                    string pRODUCTS7, 
                    string fINALDATE, 
                    string fLAG_MANDATORY, 
                    string mECHANIC, 
                    string cONFIRMATIONLEV, 
                    string cUSTOMERLEV, 
                    string dESCR, 
                    string sELLINSTART, 
                    string sELLINEND, 
                    string sELLOUTSTARTDATE, 
                    string sELLOUTENDDATE, 
                    string mECHANICS, 
                    string dISPLAY, 
                    string dISPLAY2, 
                    string dISPLAY3, 
                    string dISPLAY4, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BDD_512567",
                    "PROMO_Nightly",
                    "PromoActions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ASSOTYPE", aSSOTYPE);
            argumentsOfScenario.Add("DESCRIPTION", dESCRIPTION);
            argumentsOfScenario.Add("CUSTOMER", cUSTOMER);
            argumentsOfScenario.Add("PRODUCTS", pRODUCTS);
            argumentsOfScenario.Add("PRODUCTS2", pRODUCTS2);
            argumentsOfScenario.Add("PRODUCTS3", pRODUCTS3);
            argumentsOfScenario.Add("PRODUCTS4", pRODUCTS4);
            argumentsOfScenario.Add("PRODUCTS5", pRODUCTS5);
            argumentsOfScenario.Add("PRODUCTS6", pRODUCTS6);
            argumentsOfScenario.Add("PRODUCTS7", pRODUCTS7);
            argumentsOfScenario.Add("FINALDATE", fINALDATE);
            argumentsOfScenario.Add("FLAG_MANDATORY", fLAG_MANDATORY);
            argumentsOfScenario.Add("MECHANIC", mECHANIC);
            argumentsOfScenario.Add("CONFIRMATIONLEV", cONFIRMATIONLEV);
            argumentsOfScenario.Add("CUSTOMERLEV", cUSTOMERLEV);
            argumentsOfScenario.Add("DESCR", dESCR);
            argumentsOfScenario.Add("SELLINSTART", sELLINSTART);
            argumentsOfScenario.Add("SELLINEND", sELLINEND);
            argumentsOfScenario.Add("SELLOUTSTARTDATE", sELLOUTSTARTDATE);
            argumentsOfScenario.Add("SELLOUTENDDATE", sELLOUTENDDATE);
            argumentsOfScenario.Add("MECHANICS", mECHANICS);
            argumentsOfScenario.Add("DISPLAY", dISPLAY);
            argumentsOfScenario.Add("DISPLAY2", dISPLAY2);
            argumentsOfScenario.Add("DISPLAY3", dISPLAY3);
            argumentsOfScenario.Add("DISPLAY4", dISPLAY4);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WEB_TPM_SP_PRODSELECTOR_PROMOASSORTMENT_MANDATORY_AND_DISPLAY_001", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("the user navigates to the \'Assortments\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When(string.Format("the user creates a new assortment of Type: \'Assortment by hierarchy\', Assortment " +
                            "Type: \'{0}\', Customer Level: \'{1}\', Customer: \'{2}\', Description: \'{3}\', Save: \'" +
                            "no\'", aSSOTYPE, cUSTOMERLEV, cUSTOMER, dESCRIPTION), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.And("the user clicks on \'Checkbox\' with value \'Mandatory\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.And(string.Format("the user adds an assortment product \'{0}\'", pRODUCTS), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And(string.Format("the user adds an assortment product \'{0}\'", pRODUCTS2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And(string.Format("the user adds an assortment product \'{0}\'", pRODUCTS3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And(string.Format("the user adds an assortment product \'{0}\'", pRODUCTS4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And(string.Format("the user adds an assortment product \'{0}\'", pRODUCTS5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And(string.Format("the user adds an assortment product \'{0}\'", pRODUCTS6), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.And(string.Format("the user adds an assortment product \'{0}\'", pRODUCTS7), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.And(string.Format("the user adds an assortment product \'{0}\'", dISPLAY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
 testRunner.And(string.Format("the user adds an assortment product \'{0}\'", dISPLAY2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And(string.Format("the user adds an assortment product \'{0}\'", dISPLAY3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And(string.Format("the user adds an assortment product \'{0}\'", dISPLAY4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.And("the user clicks on \'Button\' with value \'Save\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.And("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.And("the user navigates to the \'Promotional actions\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And(string.Format("the user creates a Promo \'{0}\' \'{1}\'", cUSTOMERLEV, cUSTOMER), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And(string.Format("the user populates the cockpit \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\' \'{5}\'", dESCR, sELLINSTART, sELLINEND, sELLOUTSTARTDATE, sELLOUTENDDATE, mECHANICS), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Cockpit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Products\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And("the user clicks on the \'Product Add Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.Then("the user validates that the \'In Assortment Section\' is not present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
 testRunner.When(string.Format("the user clicks on \'Grid Checkbox\' with value \'{0}\'", pRODUCTS), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
 testRunner.And(string.Format("the user clicks on \'Grid Checkbox\' with value \'{0}\'", pRODUCTS2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.And(string.Format("the user clicks on \'Grid Checkbox\' with value \'{0}\'", pRODUCTS3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.And(string.Format("the user clicks on \'Grid Checkbox\' with value \'{0}\'", pRODUCTS4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And(string.Format("the user clicks on \'Grid Checkbox\' with value \'{0}\'", pRODUCTS5), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.And(string.Format("the user clicks on \'Grid Checkbox\' with value \'{0}\'", pRODUCTS6), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.And(string.Format("the user clicks on \'Grid Checkbox\' with value \'{0}\'", pRODUCTS7), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.Then("the user validates that the count for \'Popup Grid Selected Rows\' with value \'Prod" +
                        "uct\' is \'7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
 testRunner.And("the user validates that all popup \'Product\' checkboxes for column \'Mandatory\' are" +
                        " \'checked\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.And("the user validates that all popup \'Product\' checkboxes for column \'In Assortment\'" +
                        " are \'disabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
 testRunner.And("the user validates that all popup \'Product\' checkboxes for column \'Mandatory\' are" +
                        " \'checked\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.And("the user validates that all popup \'Product\' checkboxes for column \'In Assortment\'" +
                        " are \'disabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.When("the user clicks on \'Product Level\' with value \'Display\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
 testRunner.And(string.Format("the user clicks on \'Grid Checkbox\' with value \'{0}\'", dISPLAY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.And(string.Format("the user clicks on \'Grid Checkbox\' with value \'{0}\'", dISPLAY2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And(string.Format("the user clicks on \'Grid Checkbox\' with value \'{0}\'", dISPLAY3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.And(string.Format("the user clicks on \'Grid Checkbox\' with value \'{0}\'", dISPLAY4), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.Then("the user validates that the count for \'Popup Grid Selected Rows\' with value \'Prod" +
                        "uct\' is \'5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
