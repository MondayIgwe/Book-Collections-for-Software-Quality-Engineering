// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kantar_BDD.Features.TPM.PromoActions
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestCase_347586")]
    public partial class TestCase_347586Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TestCase_347586.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/TPM/PromoActions", "TestCase_347586", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TPM_SP_W_SMOKE_R80V1_0018 - Re-Confirm Native What-If Scenario in Draft Promo")]
        [NUnit.Framework.CategoryAttribute("BDD_347586")]
        [NUnit.Framework.CategoryAttribute("PROMO_Nightly")]
        [NUnit.Framework.CategoryAttribute("PromoActions")]
        [NUnit.Framework.TestCaseAttribute("7ADACB45A242411", "Family", "VOV", "COMMON", "Scen_US883529_AC1_002", "- None", "Level 3", "EC94791", "2021", "Promo1_US865828_AC1_002", "\"TPR in Rate \"", "Product", "079", "Promo2_US865828_AC1_002", "Confirmed", "Template", "Promo3_US865828_AC1_002", "To be authorized", "Confirm", "250", "150.00", "150", "50.00", "d+1/m/y", "d+3/m/y", "d+3/m/y", "d+5/m/y", null)]
        public virtual void TPM_SP_W_SMOKE_R80V1_0018_Re_ConfirmNativeWhat_IfScenarioInDraftPromo(
                    string pROMOPLANID, 
                    string pRODLEV, 
                    string sEGMENT, 
                    string sCENTYPE, 
                    string sCENDESC, 
                    string sOURCESCEN, 
                    string cUSTOMERLVL, 
                    string cUSTOMER, 
                    string rEFYEAR, 
                    string pROMODESC1, 
                    string mECH, 
                    string pRODLVL, 
                    string pRODCODE, 
                    string pROMODESC2, 
                    string pROMOSTATUS, 
                    string cONFIRMATIONLVL, 
                    string pROMODESC3, 
                    string sTATUS2, 
                    string sTATUS3, 
                    string eSTIMATEDQUANTITY, 
                    string sELLOUTPROMOPRICE, 
                    string nEWESTIMATEDQUANTITY, 
                    string nEWSELLOUTPROMOPRICE, 
                    string sELLINSTART, 
                    string sELLINEND, 
                    string sELLOUTSTART, 
                    string sELLOUTEND, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BDD_347586",
                    "PROMO_Nightly",
                    "PromoActions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PROMOPLANID", pROMOPLANID);
            argumentsOfScenario.Add("PRODLEV", pRODLEV);
            argumentsOfScenario.Add("SEGMENT", sEGMENT);
            argumentsOfScenario.Add("SCENTYPE", sCENTYPE);
            argumentsOfScenario.Add("SCENDESC", sCENDESC);
            argumentsOfScenario.Add("SOURCESCEN", sOURCESCEN);
            argumentsOfScenario.Add("CUSTOMERLVL", cUSTOMERLVL);
            argumentsOfScenario.Add("CUSTOMER", cUSTOMER);
            argumentsOfScenario.Add("REFYEAR", rEFYEAR);
            argumentsOfScenario.Add("PROMODESC1", pROMODESC1);
            argumentsOfScenario.Add("MECH", mECH);
            argumentsOfScenario.Add("PRODLVL", pRODLVL);
            argumentsOfScenario.Add("PRODCODE", pRODCODE);
            argumentsOfScenario.Add("PROMODESC2", pROMODESC2);
            argumentsOfScenario.Add("PROMOSTATUS", pROMOSTATUS);
            argumentsOfScenario.Add("CONFIRMATIONLVL", cONFIRMATIONLVL);
            argumentsOfScenario.Add("PROMODESC3", pROMODESC3);
            argumentsOfScenario.Add("STATUS2", sTATUS2);
            argumentsOfScenario.Add("STATUS3", sTATUS3);
            argumentsOfScenario.Add("ESTIMATEDQUANTITY", eSTIMATEDQUANTITY);
            argumentsOfScenario.Add("SELLOUTPROMOPRICE", sELLOUTPROMOPRICE);
            argumentsOfScenario.Add("NEWESTIMATEDQUANTITY", nEWESTIMATEDQUANTITY);
            argumentsOfScenario.Add("NEWSELLOUTPROMOPRICE", nEWSELLOUTPROMOPRICE);
            argumentsOfScenario.Add("SELLINSTART", sELLINSTART);
            argumentsOfScenario.Add("SELLINEND", sELLINEND);
            argumentsOfScenario.Add("SELLOUTSTART", sELLOUTSTART);
            argumentsOfScenario.Add("SELLOUTEND", sELLOUTEND);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TPM_SP_W_SMOKE_R80V1_0018 - Re-Confirm Native What-If Scenario in Draft Promo", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("the user navigates to the \'Promotional actions\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When(string.Format("the user creates a Promo \'{0}\' \'{1}\'", cUSTOMERLVL, cUSTOMER), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.And(string.Format("the user populates the cockpit \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\' \'{5}\'", pROMODESC1, sELLINSTART, sELLINEND, sELLOUTSTART, sELLOUTEND, mECH), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And(string.Format("the user adds a product \'{0}\' \'{1}\'", pRODLVL, pRODCODE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And("the user clicks on the \'Save Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And("the user clicks on \'Button\' with value \'Edit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Estimated quantity\' for product code \'{1}\'", eSTIMATEDQUANTITY, pRODCODE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Sell-out promo price (PZ)\' for product code" +
                            " \'{1}\'", sELLOUTPROMOPRICE, pRODCODE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
 testRunner.And("the user clicks on the \'Save Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And("the user creates a new Promotional What If \'version1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Estimated quantity\' for product code \'{1}\'", nEWESTIMATEDQUANTITY, pRODCODE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Sell-out promo price (PZ)\' for product code" +
                            " \'{1}\'", nEWSELLOUTPROMOPRICE, pRODCODE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.And("the user clicks on the \'Save Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And("the user changes the Promo What If \'NATIVE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.Then(string.Format("the user validates text \'{0}\' on column name \'Estimated quantity\' for product cod" +
                            "e \'{1}\'", eSTIMATEDQUANTITY, pRODCODE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
 testRunner.And(string.Format("the user validates text \'{0}\' on column name \'Sell-out promo price (PZ)\' for prod" +
                            "uct code \'{1}\'", sELLOUTPROMOPRICE, pRODCODE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.When("the user changes the Promo What If \'version1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.Then(string.Format("the user validates text \'{0}\' on column name \'Estimated quantity\' for product cod" +
                            "e \'{1}\'", nEWESTIMATEDQUANTITY, pRODCODE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
 testRunner.And(string.Format("the user validates text \'{0}\' on column name \'Sell-out promo price (PZ)\' for prod" +
                            "uct code \'{1}\'", nEWSELLOUTPROMOPRICE, pRODCODE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.When("the user clicks on the \'Save Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
 testRunner.And("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
