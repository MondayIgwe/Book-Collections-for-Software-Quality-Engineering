// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kantar_BDD.Features.Inspired
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PROMOPLAN_INJECTOFF_WIZARD_NON_RE-ASSIGNABLE_PROMOS_001")]
    public partial class PROMOPLAN_INJECTOFF_WIZARD_NON_RE_ASSIGNABLE_PROMOS_001Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Benedict.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Inspired", "PROMOPLAN_INJECTOFF_WIZARD_NON_RE-ASSIGNABLE_PROMOS_001", "\tOnce the Inject One-Off Wizard is opened, \r\n\tUser must be informed that there ar" +
                    "e some non reassignable promotions (if any)  [as is]\r\n\tat STEP1, the user must h" +
                    "ave the possibility to view the list of non reassignable promotions.  [to be]", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("WEB_TPM_SP_PROMOPLAN_INJECTOFF_WIZARD_NON_RE-ASSIGNABLE_PROMOS_US883529_AC1_001")]
        [NUnit.Framework.TestCaseAttribute("XTEL AUTOMATION 4 - Global Group SM1V4", "18CA682F197B4BD", "Family", "AMARETTO", "COMMON", "Scen_US883529_AC1_001", "- None", "The following scenario was created succesfully", "Level 3", "EC86158", "2022", "Promo1_US865828_AC1_001", "TPR in rate,Leaflet", "Product", "076", "Promo2_US865828_AC1_001", "Confirmed", "Promo3_US865828_AC1_001", "Holder level", "d+1/m/y", "d+3/m/y", "d+3/m/y", "d+5/m/y", null)]
        public virtual void WEB_TPM_SP_PROMOPLAN_INJECTOFF_WIZARD_NON_RE_ASSIGNABLE_PROMOS_US883529_AC1_001(
                    string dIVISION, 
                    string pROMOPLANID, 
                    string pRODLEV, 
                    string sEGMENT, 
                    string sCENTYPE, 
                    string sCENDESC, 
                    string sOURCESCEN, 
                    string cONFIRMATIONMESSAGE, 
                    string cUSTOMERLVL, 
                    string cUSTOMER, 
                    string rEFYEAR, 
                    string pROMODESC1, 
                    string mECH, 
                    string pRODLVL, 
                    string pRODCODE, 
                    string pROMODESC2, 
                    string pROMOSTATUS, 
                    string pROMODESC3, 
                    string cONFIRMATION_LEVEL, 
                    string sELLINSTART, 
                    string sELLINEND, 
                    string sELLOUTSTART, 
                    string sELLOUTEND, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DIVISION", dIVISION);
            argumentsOfScenario.Add("PROMOPLANID", pROMOPLANID);
            argumentsOfScenario.Add("PRODLEV", pRODLEV);
            argumentsOfScenario.Add("SEGMENT", sEGMENT);
            argumentsOfScenario.Add("SCENTYPE", sCENTYPE);
            argumentsOfScenario.Add("SCENDESC", sCENDESC);
            argumentsOfScenario.Add("SOURCESCEN", sOURCESCEN);
            argumentsOfScenario.Add("CONFIRMATIONMESSAGE", cONFIRMATIONMESSAGE);
            argumentsOfScenario.Add("CUSTOMERLVL", cUSTOMERLVL);
            argumentsOfScenario.Add("CUSTOMER", cUSTOMER);
            argumentsOfScenario.Add("REFYEAR", rEFYEAR);
            argumentsOfScenario.Add("PROMODESC1", pROMODESC1);
            argumentsOfScenario.Add("MECH", mECH);
            argumentsOfScenario.Add("PRODLVL", pRODLVL);
            argumentsOfScenario.Add("PRODCODE", pRODCODE);
            argumentsOfScenario.Add("PROMODESC2", pROMODESC2);
            argumentsOfScenario.Add("PROMOSTATUS", pROMOSTATUS);
            argumentsOfScenario.Add("PROMODESC3", pROMODESC3);
            argumentsOfScenario.Add("CONFIRMATION_LEVEL", cONFIRMATION_LEVEL);
            argumentsOfScenario.Add("SELLINSTART", sELLINSTART);
            argumentsOfScenario.Add("SELLINEND", sELLINEND);
            argumentsOfScenario.Add("SELLOUTSTART", sELLOUTSTART);
            argumentsOfScenario.Add("SELLOUTEND", sELLOUTEND);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WEB_TPM_SP_PROMOPLAN_INJECTOFF_WIZARD_NON_RE-ASSIGNABLE_PROMOS_US883529_AC1_001", "AC_1 - Select some promo -> To be automated\r\nIn case\r\nof SHARED mode\r\nand\r\nuser s" +
                    "elected some promos\r\nand some of them are not reassignable\r\nWhen\r\nWizard is open" +
                    "ed\r\nThen\r\nuser is informed", tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
 testRunner.Given(string.Format("the user has logged in with division \'{0}\'", dIVISION), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 21
 testRunner.Given("the user navigates to the \'Promotional actions\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
 testRunner.When(string.Format("the user creates a Promo with segment \'{0}\' \'{1}\' \'Delegation\' \'{2}\' \'FRENCH WINE" +
                            "\'", cUSTOMERLVL, cUSTOMER, rEFYEAR), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
 testRunner.And(string.Format("the user populates the cockpit \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\' \'{5}\'", pROMODESC1, sELLINSTART, sELLINEND, sELLOUTSTART, sELLOUTEND, mECH), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And(string.Format("the user adds a product \'{0}\' \'{1}\'", pRODLVL, pRODCODE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
