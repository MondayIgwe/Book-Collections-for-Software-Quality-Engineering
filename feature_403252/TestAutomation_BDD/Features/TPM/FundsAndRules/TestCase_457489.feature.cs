// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kantar_BDD.Features.TPM.FundsAndRules
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestCase_457489")]
    public partial class TestCase_457489Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TestCase_457489.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/TPM/FundsAndRules", "TestCase_457489", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("WEB_TPM_SP_FRDOCUMENT_REMOVECONSTRAINTS_003")]
        [NUnit.Framework.CategoryAttribute("BDD_457489")]
        [NUnit.Framework.CategoryAttribute("PROMO_Nightly")]
        [NUnit.Framework.CategoryAttribute("FundsAndRules")]
        [NUnit.Framework.TestCaseAttribute("Sales Fund", "10/01/y", "20/12/y", "WEB_TPM_SP_FRDOCUMENT_REMOVECONSTRAINTS_003", "Level 5", "10/01/y", "30/06/y", "1000", "2000", "01/07/y", "20/12/y", "01,02", "Confirm", "Modified", "EC86170", "10/01/y", "20/12/y", "Leaflet", "Product", "009", "100", "To be authorized", "Confirm", "", "", "", "", null)]
        public virtual void WEB_TPM_SP_FRDOCUMENT_REMOVECONSTRAINTS_003(
                    string cONFIGURATIONID, 
                    string sTARTSELLIN, 
                    string eNDSELLIN, 
                    string dESCRIPTION, 
                    string cUSTOMERLEVEL, 
                    string vALIDITYSTART1, 
                    string vALIDITYEND1, 
                    string vALUE, 
                    string vALUE2, 
                    string vALIDITYSTART2, 
                    string vALIDITYEND2, 
                    string fAMILYCONSTRAINTS, 
                    string sTATUS, 
                    string sTATUS2, 
                    string cUSTOMER, 
                    string pROMOSELLINSTART, 
                    string pROMOSELLINEND, 
                    string mECHANIC, 
                    string pRODLVL, 
                    string pRODUCT, 
                    string mECHANICVALUE, 
                    string cHANGESTATUSES, 
                    string cHANGESTATUSES2, 
                    string pRODUCT_GROUPS, 
                    string rATEFUNDSOURCE, 
                    string sELLOUTSTART, 
                    string sELLOUTEND, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BDD_457489",
                    "PROMO_Nightly",
                    "FundsAndRules"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("CONFIGURATIONID", cONFIGURATIONID);
            argumentsOfScenario.Add("STARTSELLIN", sTARTSELLIN);
            argumentsOfScenario.Add("ENDSELLIN", eNDSELLIN);
            argumentsOfScenario.Add("DESCRIPTION", dESCRIPTION);
            argumentsOfScenario.Add("CUSTOMERLEVEL", cUSTOMERLEVEL);
            argumentsOfScenario.Add("VALIDITYSTART1", vALIDITYSTART1);
            argumentsOfScenario.Add("VALIDITYEND1", vALIDITYEND1);
            argumentsOfScenario.Add("VALUE", vALUE);
            argumentsOfScenario.Add("VALUE2", vALUE2);
            argumentsOfScenario.Add("VALIDITYSTART2", vALIDITYSTART2);
            argumentsOfScenario.Add("VALIDITYEND2", vALIDITYEND2);
            argumentsOfScenario.Add("FAMILYCONSTRAINTS", fAMILYCONSTRAINTS);
            argumentsOfScenario.Add("STATUS", sTATUS);
            argumentsOfScenario.Add("STATUS2", sTATUS2);
            argumentsOfScenario.Add("CUSTOMER", cUSTOMER);
            argumentsOfScenario.Add("PROMOSELLINSTART", pROMOSELLINSTART);
            argumentsOfScenario.Add("PROMOSELLINEND", pROMOSELLINEND);
            argumentsOfScenario.Add("MECHANIC", mECHANIC);
            argumentsOfScenario.Add("PRODLVL", pRODLVL);
            argumentsOfScenario.Add("PRODUCT", pRODUCT);
            argumentsOfScenario.Add("MECHANICVALUE", mECHANICVALUE);
            argumentsOfScenario.Add("CHANGESTATUSES", cHANGESTATUSES);
            argumentsOfScenario.Add("CHANGESTATUSES2", cHANGESTATUSES2);
            argumentsOfScenario.Add("PRODUCT_GROUPS", pRODUCT_GROUPS);
            argumentsOfScenario.Add("RATEFUNDSOURCE", rATEFUNDSOURCE);
            argumentsOfScenario.Add("SELLOUTSTART", sELLOUTSTART);
            argumentsOfScenario.Add("SELLOUTEND", sELLOUTEND);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WEB_TPM_SP_FRDOCUMENT_REMOVECONSTRAINTS_003", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("the user navigates to the \'Funds & Rules\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When(string.Format("the user creates a new fund and rules \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\' \'{5}\' \'{6}\'", cONFIGURATIONID, cUSTOMERLEVEL, dESCRIPTION, sTARTSELLIN, eNDSELLIN, pRODUCT_GROUPS, rATEFUNDSOURCE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Constraints\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And(string.Format("user adds a \'Fund value\' constraint with value \'{0}\' \'{1}\' \'{2}\' \'\'", vALUE, vALIDITYSTART1, vALIDITYEND1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Summary\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Constraints\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And(string.Format("user adds a \'Fund value\' constraint with value \'{0}\' \'{1}\' \'{2}\' \'{3}\'", vALUE2, vALIDITYSTART2, vALIDITYEND2, fAMILYCONSTRAINTS), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Summary\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.And(string.Format("the user changes the status to \'{0}\'", sTATUS), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
 testRunner.And("the user retrieves text from element \'Input By Label Name\' with value \'Funds & Ru" +
                        "les code\' and saves it as \'FundsRulesCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.And("the user navigates to the \'Promotional actions\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.And(string.Format("the user creates a Promo \'{0}\' \'{1}\'", cUSTOMERLEVEL, cUSTOMER), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.And(string.Format("the user populates the cockpit \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\' \'{5}\'", dESCRIPTION, pROMOSELLINSTART, pROMOSELLINEND, sELLOUTSTART, sELLOUTEND, mECHANIC), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.And(string.Format("the user adds a product \'{0}\' \'{1}\'", pRODLVL, pRODUCT), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'{1}\' for product code \'{2}\'", mECHANICVALUE, mECHANIC, pRODUCT), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And("the user clicks on \'Top Tab\' with value \'Funds\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And("the user clicks on \'Grid CheckBox Containing\' with value \'FundsRulesCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Cockpit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And(string.Format("the user changes the status to \'{0}\'", cHANGESTATUSES), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And("the user clicks on the \'Save Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.And("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.And("the user navigates to the \'Funds & Rules\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.And("the user filters the column by column name \'Funds & Rules code\', \'Like\', \'FundsRu" +
                        "lesCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.And("the user clicks on \'Text\' with value \'FundsRulesCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And("the user clicks on \'Button\' with value \'Edit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Summary\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.And(string.Format("the user changes the status to \'{0}\'", sTATUS2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Constraints\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.And(string.Format("the user clicks on \'{0}\' text on the grid", vALIDITYEND1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
 testRunner.And("the user clicks on the \'Remove Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.Then("the user validates that the \'Text\' with value \'Selected constraint(s) cannot be r" +
                        "emoved because it has fund movements associated.\' is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
 testRunner.When(string.Format("the user unchecks the \'Grid CheckBox\' with value \'{0}\'", vALIDITYEND1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
 testRunner.And(string.Format("the user unchecks the \'Grid CheckBox\' with value \'{0}\'", vALIDITYEND2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.And(string.Format("the user clicks on \'Grid CheckBox\' with value \'{0}\' until \'Remove Button\' is enab" +
                            "led", vALIDITYEND2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.And("the user clicks on the \'Remove Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.Then("the user validates that the \'Alert Dialog Message Box\' is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.When("the user clicks on the \'Alert Dialog Cancel Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 56
 testRunner.And("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
