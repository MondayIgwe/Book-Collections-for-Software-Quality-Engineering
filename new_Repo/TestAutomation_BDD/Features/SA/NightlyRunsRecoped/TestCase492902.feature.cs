// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kantar_BDD.Features.SA.NightlyRunsRecoped
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestCase492902")]
    public partial class TestCase492902Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TestCase492902.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/SA/NightlyRunsRecoped", "TestCase492902", "\tWEB_SA_CLAIM_CLAIM DOCUMENT_MATCHINGS_032 - Single match - assign button with OP" +
                    "A <= 0 ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("WEB_SA_CLAIM_CLAIM DOCUMENT_MATCHINGS_032")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        [NUnit.Framework.TestCaseAttribute("XTEL SFA AUTOMATION - Global Group SM1V4", "EC86217", "Level 4", "Supply", "Year End Bonuses", "Unconditional", "Test_Matchings_032_1", "100", "Net sales revenue", "Invoice payable", "Monthly", "Confirm", "Test_Matchings_032_2", "150", "Test_Matchings_032_3", "Confirm", "LIQ - Settlements", "RAT - Accruals", "REO", "Claim A", "300", "100", "100.00", "200.00", "150.00", "Claim C", "Today", "500", "0.00", "200.00", "-50.00", "300.00", "0.00", "SAR1", null)]
        public virtual void WEB_SA_CLAIM_CLAIMDOCUMENT_MATCHINGS_032(
                    string division, 
                    string customer, 
                    string customerLevel, 
                    string classification, 
                    string reason, 
                    string targettype, 
                    string description, 
                    string fixedAmount, 
                    string dataSource, 
                    string paymentMode, 
                    string paymentFrequency, 
                    string status, 
                    string description1, 
                    string fixedAmount1, 
                    string description2, 
                    string transition, 
                    string lIQ, 
                    string rAT, 
                    string documentType, 
                    string customerDocument, 
                    string amount, 
                    string amountToMatch, 
                    string opa1, 
                    string amountToMatch1, 
                    string opa2, 
                    string customerDocument2, 
                    string documentDate, 
                    string amount2, 
                    string opa0, 
                    string amountToMatch2, 
                    string opa50, 
                    string amountToMatch3, 
                    string amountToMatch4, 
                    string reasonCode, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("division", division);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("CustomerLevel", customerLevel);
            argumentsOfScenario.Add("classification", classification);
            argumentsOfScenario.Add("reason", reason);
            argumentsOfScenario.Add("targettype", targettype);
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("fixedAmount", fixedAmount);
            argumentsOfScenario.Add("dataSource", dataSource);
            argumentsOfScenario.Add("paymentMode", paymentMode);
            argumentsOfScenario.Add("paymentFrequency", paymentFrequency);
            argumentsOfScenario.Add("status", status);
            argumentsOfScenario.Add("Description1", description1);
            argumentsOfScenario.Add("fixedAmount1", fixedAmount1);
            argumentsOfScenario.Add("description2", description2);
            argumentsOfScenario.Add("transition", transition);
            argumentsOfScenario.Add("LIQ", lIQ);
            argumentsOfScenario.Add("RAT", rAT);
            argumentsOfScenario.Add("DocumentType", documentType);
            argumentsOfScenario.Add("CustomerDocument", customerDocument);
            argumentsOfScenario.Add("Amount", amount);
            argumentsOfScenario.Add("AmountToMatch", amountToMatch);
            argumentsOfScenario.Add("opa1", opa1);
            argumentsOfScenario.Add("AmountToMatch1", amountToMatch1);
            argumentsOfScenario.Add("opa2", opa2);
            argumentsOfScenario.Add("CustomerDocument2", customerDocument2);
            argumentsOfScenario.Add("DocumentDate", documentDate);
            argumentsOfScenario.Add("Amount2", amount2);
            argumentsOfScenario.Add("opa0", opa0);
            argumentsOfScenario.Add("AmountToMatch2", amountToMatch2);
            argumentsOfScenario.Add("opa50", opa50);
            argumentsOfScenario.Add("AmountToMatch3", amountToMatch3);
            argumentsOfScenario.Add("AmountToMatch4", amountToMatch4);
            argumentsOfScenario.Add("reasonCode", reasonCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("WEB_SA_CLAIM_CLAIM DOCUMENT_MATCHINGS_032", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given(string.Format("the user changes division to \'{0}\'", division), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.When("the user navigates to the \'Rebates\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.When(string.Format("the user creates a Rebate \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\'", customerLevel, customer, classification, reason, targettype), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Rebate code\' is dis" +
                        "played", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
    testRunner.When("the user retrieves text from element \'Input By Label Name\' with value \'Rebate cod" +
                        "e\' and saves it as \'RebateCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
 testRunner.And(string.Format("the user populates the Rebate mandatory data \'{0}\' \'{1}\' \'{2}\'", dataSource, paymentMode, paymentFrequency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
 testRunner.When(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'DESCRIPTION\'", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
 testRunner.And(string.Format("the user enters \'{0}\' in cell with column \'Fixed amount\' and row containing text " +
                            "\'0.0\'", fixedAmount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'General Info\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
    testRunner.And("the user clicks on the \'Status Arrow Icon\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
    testRunner.And(string.Format("the user clicks on \'Radio Button\' with value \'{0}\'", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
    testRunner.And("the user clicks on \'Popup Ok Button\' with value \'Change Status\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And("the user navigates to the \'Rebates\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And(string.Format("the user creates a Rebate \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\'", customerLevel, customer, classification, reason, targettype), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
    testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Rebate code\' is dis" +
                        "played", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
    testRunner.When("the user retrieves text from element \'Input By Label Name\' with value \'Rebate cod" +
                        "e\' and saves it as \'RebateCode1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
 testRunner.And(string.Format("the user populates the Rebate mandatory data \'{0}\' \'{1}\' \'{2}\'", dataSource, paymentMode, paymentFrequency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.When(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'DESCRIPTION\'", description1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
 testRunner.And(string.Format("the user enters \'{0}\' in cell with column \'Fixed amount\' and row containing text " +
                            "\'0.0\'", fixedAmount1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'General Info\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
    testRunner.And("the user clicks on the \'Status Arrow Icon\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
    testRunner.And(string.Format("the user clicks on \'Radio Button\' with value \'{0}\'", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
    testRunner.And("the user clicks on \'Popup Ok Button\' with value \'Change Status\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.And("the user navigates to the \'Rebates\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And(string.Format("the user creates a Rebate \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\'", customerLevel, customer, classification, reason, targettype), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
    testRunner.Then("the user validates that the \'Input By Label Name\' with value \'Rebate code\' is dis" +
                        "played", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
    testRunner.When("the user retrieves text from element \'Input By Label Name\' with value \'Rebate cod" +
                        "e\' and saves it as \'RebateCode2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.And(string.Format("the user populates the Rebate mandatory data \'{0}\' \'{1}\' \'{2}\'", dataSource, paymentMode, paymentFrequency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.When(string.Format("the user enters \'{0}\' in field \'Input By Label Name\' with value \'DESCRIPTION\'", description2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
 testRunner.And(string.Format("the user enters \'{0}\' in cell with column \'Fixed amount\' and row containing text " +
                            "\'0.0\'", fixedAmount1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'General Info\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
    testRunner.And("the user clicks on the \'Status Arrow Icon\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
    testRunner.And(string.Format("the user clicks on \'Radio Button\' with value \'{0}\'", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
    testRunner.And("the user clicks on \'Popup Ok Button\' with value \'Change Status\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.When("the user navigates to the \'Calculation Session\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
 testRunner.And(string.Format("the user runs a calculation \'{0}\' on reabte \'RebateCode\'", lIQ), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.And(string.Format("the user runs a calculation \'{0}\' on reabte \'RebateCode1\'", lIQ), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.And(string.Format("the user runs a calculation \'{0}\' on reabte \'RebateCode2\'", rAT), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.And("the user navigates to the \'Claims\' page under division\'Claims\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.And(string.Format("the user creates a New Claim \'{0}\' \'{1}\' \'{2}\' \'{3}\'", customerDocument, customerLevel, customer, amount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.And("the user clicks on \'Button\' with value \'Match To\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.And("the user clicks on \'Menu Item Text\' with value \'Match to rebate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
    testRunner.And("the user clicks on \'Grid Checkbox\' with value \'RebateCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
    testRunner.And("the user clicks on \'Grid Checkbox\' with value \'RebateCode1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
    testRunner.And("the user clicks on \'Popup Ok Button\' with value \'Select Rebates\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And(string.Format("the user in popup \'Matching finalization\' enters \'{0}\' in cell with column \'Amoun" +
                            "t to match\' and row text \'{1}\'", amountToMatch, opa1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
 testRunner.And(string.Format("the user in popup \'Matching finalization\' enters \'{0}\' in cell with column \'Amoun" +
                            "t to match\' and row text \'{1}\'", amountToMatch1, opa2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
    testRunner.And("the user clicks on \'Popup Ok Button\' with value \'Matching finalization\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
 testRunner.And("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.And(string.Format("the user creates a New Claim \'{0}\' \'{1}\' \'{2}\' \'{3}\'", customerDocument2, customerLevel, customer, amount2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.And("the user clicks on \'Button\' with value \'Match To\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.And("the user clicks on \'Menu Item Text\' with value \'Match to rebate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
    testRunner.And("the user clicks on \'Grid Checkbox\' with value \'RebateCode1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
    testRunner.And("the user clicks on \'Grid Checkbox\' with value \'RebateCode2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
    testRunner.And("the user clicks on \'Popup Ok Button\' with value \'Select Rebates\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
 testRunner.Then(string.Format("the user validates that popup \'Matching finalization\' column \'Amount to match\' ha" +
                            "s \'{0}\' with row text \'RebateCode\'", amountToMatch2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
 testRunner.And(string.Format("the user validates that popup \'Matching finalization\' column \'Amount to match\' ha" +
                            "s \'{0}\' with row text \'{1}\'", amountToMatch3, opa50), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
 testRunner.And(string.Format("the user validates that popup \'Matching finalization\' column \'Amount to match\' ha" +
                            "s \'{0}\' with row text \'{1}\'", amountToMatch4, opa0), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.And("the user validates that the \'Popup Ok Button\' with value \'Matching finalization\' " +
                        "is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
    testRunner.When("the user clicks on \'Popup Ok Button\' with value \'Matching finalization\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 93
 testRunner.Then(string.Format("the user validates that column \'Amount\' has \'{0}\' with row text \'{1}\'", amountToMatch2, description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 94
 testRunner.And(string.Format("the user validates that column \'Rebate code\' has \'RebateCode\' with row text \'{0}\'" +
                            "", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
 testRunner.Then(string.Format("the user validates that column \'Amount\' has \'AmountToMatch3\' with row text \'{0}\'", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
 testRunner.And("the user validates that column \'Rebate code\' has \'RebateCode1\' with row text \'<de" +
                        "scription1>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
