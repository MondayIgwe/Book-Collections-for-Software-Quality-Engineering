// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kantar_BDD.Features.TPM.PromoActions
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestCase_344842")]
    public partial class TestCase_344842Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TestCase_344842.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/TPM/PromoActions", "TestCase_344842", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TPM_SP_W_SMOKE_R80V1_0014 - Mechanics Selection")]
        [NUnit.Framework.CategoryAttribute("BDD_344842")]
        [NUnit.Framework.CategoryAttribute("PROMO_Nightly")]
        [NUnit.Framework.CategoryAttribute("PromoActions")]
        [NUnit.Framework.TestCaseAttribute("4526", "TPR in %", "Hostess", "Def. Cut Price in %", "Leaflet", "LF_COST", "008", "011", "Product", "Def. % Cost", "Demo", "% Def. Cut Price", "ESTIMATEDDEFDISCPERC", "DEMO_COST", "DEF_DISC_PERC", "Total Promo Cost", "% Def. Cut Price", "40", "884", "Level 3", "EC86221", "d+1/m/y", "d+7/m/y", "", "", "TPM_SP_W_SMOKE_R80V1_0014", null)]
        public virtual void TPM_SP_W_SMOKE_R80V1_0014_MechanicsSelection(
                    string iDACTION, 
                    string mECH1, 
                    string mECH2, 
                    string mECH3, 
                    string mECH_FUND_INJ, 
                    string mECH_FUND_INJ_ID, 
                    string pROD1, 
                    string pROD2, 
                    string pRODUCT_LEVEL, 
                    string mEAS_MECH, 
                    string mEAS_MECH2, 
                    string mEAS_MECH3, 
                    string mEAS_MECH_ID, 
                    string mEAS_MECH_ID2, 
                    string mEAS_MECH_ID3, 
                    string mEAS_READONLY, 
                    string mEAS_READONLY2, 
                    string mEAS_VALUE_PROD, 
                    string fUND, 
                    string cUSTOMERLVL, 
                    string cUSTOMER, 
                    string sELLINSTART, 
                    string sELLINEND, 
                    string sELLOUTSTARTDATE, 
                    string sELLOUTENDDATE, 
                    string pROMODESC1, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BDD_344842",
                    "PROMO_Nightly",
                    "PromoActions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("IDACTION", iDACTION);
            argumentsOfScenario.Add("MECH1", mECH1);
            argumentsOfScenario.Add("MECH2", mECH2);
            argumentsOfScenario.Add("MECH3", mECH3);
            argumentsOfScenario.Add("MECH_FUND_INJ", mECH_FUND_INJ);
            argumentsOfScenario.Add("MECH_FUND_INJ_ID", mECH_FUND_INJ_ID);
            argumentsOfScenario.Add("PROD1", pROD1);
            argumentsOfScenario.Add("PROD2", pROD2);
            argumentsOfScenario.Add("PRODUCT_LEVEL", pRODUCT_LEVEL);
            argumentsOfScenario.Add("MEAS_MECH", mEAS_MECH);
            argumentsOfScenario.Add("MEAS_MECH2", mEAS_MECH2);
            argumentsOfScenario.Add("MEAS_MECH3", mEAS_MECH3);
            argumentsOfScenario.Add("MEAS_MECH_ID", mEAS_MECH_ID);
            argumentsOfScenario.Add("MEAS_MECH_ID2", mEAS_MECH_ID2);
            argumentsOfScenario.Add("MEAS_MECH_ID3", mEAS_MECH_ID3);
            argumentsOfScenario.Add("MEAS_READONLY", mEAS_READONLY);
            argumentsOfScenario.Add("MEAS_READONLY2", mEAS_READONLY2);
            argumentsOfScenario.Add("MEAS_VALUE_PROD", mEAS_VALUE_PROD);
            argumentsOfScenario.Add("FUND", fUND);
            argumentsOfScenario.Add("CUSTOMERLVL", cUSTOMERLVL);
            argumentsOfScenario.Add("CUSTOMER", cUSTOMER);
            argumentsOfScenario.Add("SELLINSTART", sELLINSTART);
            argumentsOfScenario.Add("SELLINEND", sELLINEND);
            argumentsOfScenario.Add("SELLOUTSTARTDATE", sELLOUTSTARTDATE);
            argumentsOfScenario.Add("SELLOUTENDDATE", sELLOUTENDDATE);
            argumentsOfScenario.Add("PROMODESC1", pROMODESC1);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TPM_SP_W_SMOKE_R80V1_0014 - Mechanics Selection", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("the user navigates to the \'Promotional actions\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When(string.Format("the user creates a Promo \'{0}\' \'{1}\'", cUSTOMERLVL, cUSTOMER), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.And(string.Format("the user populates the cockpit \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\' \'\'", pROMODESC1, sELLINSTART, sELLINEND, sELLOUTSTARTDATE, sELLOUTENDDATE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And("the user clicks on the \'Save Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'General info\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And(string.Format("the user clicks on \'Mechanics CheckBox\' with value \'{0}\'", mECH1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.And(string.Format("the user clicks on \'Mechanics CheckBox\' with value \'{0}\'", mECH2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.And(string.Format("the user clicks on \'Mechanics CheckBox\' with value \'{0}\'", mECH3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And(string.Format("the user adds a product \'{0}\' \'{1}\'", pRODUCT_LEVEL, pROD1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And(string.Format("the user adds a product \'{0}\' \'{1}\'", pRODUCT_LEVEL, pROD2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.And("the user clicks on the \'Product Grid Select Measures\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.And("the user clicks on \'List\' with value \'All\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.Then(string.Format("the user validates text contains \'{0}\' on column name \'Promotional Mechanics\' for" +
                            " product code \'{1}\'", mECH1, pROD1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
 testRunner.And(string.Format("the user validates text contains \'{0}\' on column name \'Promotional Mechanics\' for" +
                            " product code \'{1}\'", mECH2, pROD1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And(string.Format("the user validates text contains \'{0}\' on column name \'Promotional Mechanics\' for" +
                            " product code \'{1}\'", mECH3, pROD1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And(string.Format("the user validates text contains \'{0}\' on column name \'Promotional Mechanics\' for" +
                            " product code \'{1}\'", mECH1, pROD2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And(string.Format("the user validates text contains \'{0}\' on column name \'Promotional Mechanics\' for" +
                            " product code \'{1}\'", mECH2, pROD2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And(string.Format("the user validates text contains \'{0}\' on column name \'Promotional Mechanics\' for" +
                            " product code \'{1}\'", mECH3, pROD2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.And(string.Format("the user validates that the \'Column\' with value \'{0}\' is present", mEAS_MECH), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And(string.Format("the user validates that the \'Column\' with value \'{0}\' is present", mEAS_MECH2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And(string.Format("the user validates that the \'Column\' with value \'{0}\' is present", mEAS_MECH3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.And(string.Format("the user validates that the \'Element by SM1Id\' with value \'{0}\' is present", mEAS_MECH_ID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.And(string.Format("the user validates that the \'Element by SM1Id\' with value \'{0}\' is present", mEAS_MECH_ID2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.And(string.Format("the user validates that the \'Element by SM1Id\' with value \'{0}\' is present", mEAS_MECH_ID3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.When("the user clicks on \'Side Panel Tab\' with value \'General info\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
 testRunner.And(string.Format("the user clicks on \'Mechanics CheckBox\' with value \'{0}\'", mECH3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And("the user clicks on the \'Alert Dialog Yes Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Products\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.Then(string.Format("the user validates that the \'Column\' with value \'{0}\' is not present", mEAS_MECH), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
 testRunner.And(string.Format("the user validates that the \'Column\' with value \'{0}\' is not present", mEAS_MECH3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.When("the user clicks on \'Side Panel Tab\' with value \'General info\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
 testRunner.And(string.Format("the user clicks on \'Mechanics CheckBox\' with value \'{0}\'", mECH_FUND_INJ), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.And("the user clicks on the \'Alert Dialog No Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Products\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
 testRunner.Then(string.Format("the user validates text does not contain \'{0}\' on column name \'Promotional Mechan" +
                            "ics\' for product code \'{1}\'", mECH_FUND_INJ, pROD2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
 testRunner.And(string.Format("the user validates that column name \'{0}\' for product code \'{1}\' \'is not\' editabl" +
                            "e", mEAS_READONLY, pROD1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.And("the user validates that the \'Element by SM1Id\' with value \'<LF_COST>\' is not pres" +
                        "ent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.When(string.Format("the user opens the trigger on product column \'Promotional Mechanics\' and Row \'{0}" +
                            "\'", pROD1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
 testRunner.And(string.Format("the user clicks on \'PopUp Grid CheckBox\' with value \'{0}\'", mECH_FUND_INJ), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
 testRunner.And("the user clicks on \'Popup Button\' with value \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.Then(string.Format("the user validates that column name \'{0}\' for product code \'{1}\' \'is not\' editabl" +
                            "e", mEAS_READONLY, pROD1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
 testRunner.And(string.Format("the user validates that column name \'{0}\' for product code \'{1}\' \'is\' editable", mECH_FUND_INJ, pROD1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.When("the user clicks on \'Side Panel Tab\' with value \'General info\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
 testRunner.And(string.Format("the user clicks on \'Mechanics CheckBox\' with value \'{0}\'", mECH3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.And("the user clicks on the \'Alert Dialog No Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Products\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
 testRunner.And(string.Format("the user opens the trigger on product column \'Promotional Mechanics\' and Row \'{0}" +
                            "\'", pROD2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
 testRunner.And(string.Format("the user clicks on \'PopUp Grid CheckBox\' with value \'{0}\'", mECH3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
 testRunner.And("the user clicks on \'Popup Button\' with value \'OK\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
 testRunner.Then(string.Format("the user validates that column name \'{0}\' for product code \'{1}\' \'is\' editable", mEAS_MECH3, pROD2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
 testRunner.When(string.Format("the user enters \'{0}\' on column name \'Leaflet\' for product code \'{1}\'", mEAS_VALUE_PROD, pROD1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
 testRunner.And("the user clicks on \'Sub Tab\' with value \'Funds\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.Then(string.Format("the \'Text in Grid\' with value \'{0}\'  is not present", fUND), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
 testRunner.When("the user clicks on \'Button Link\' with value \'Calculate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
 testRunner.And("the user closes all pages without saving the work done where there is no pop up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
