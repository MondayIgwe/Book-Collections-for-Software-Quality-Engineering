// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kantar_BDD.Features.SFA.AdvancedPricing
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TC_465360_Template")]
    public partial class TC_465360_TemplateFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TC_465360_Template.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/SFA/AdvancedPricing", "TC_465360_Template", "\tTemplate for Test Case 465360", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TC_465350_ForMapping")]
        [NUnit.Framework.CategoryAttribute("TC_465350_ForMapping")]
        [NUnit.Framework.TestCaseAttribute("WEB_SFA_SF_CNVACT_034", "Group Benefit1 for WEB_SFA_SF_CNVACT_034 - Cost 48 - Max Number of Times 0", "3 - % Discount on Order Row", "Benefit: Benefit cannot be 0", "Min. Value: Min. Value is higher than Benefit", "11", "9", "10", "Max. Value: Max. Value is lower than Benefit", "1° Alarm Max discount: 1° Alarm Max discount must be between Benefit and Max. Val" +
            "ue", "12", "8", null)]
        public virtual void TC_465350_ForMapping(string aP1, string benefitNode1, string benType1, string errorNewCodContext, string errorQtyBenMin, string minValue, string maxValue, string benefitValue, string errorQtyBenMax, string errorQtyBenSoftMax, string maxValue2, string maxDiscValue, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC_465350_ForMapping"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("AP1", aP1);
            argumentsOfScenario.Add("BenefitNode1", benefitNode1);
            argumentsOfScenario.Add("BenType1", benType1);
            argumentsOfScenario.Add("ErrorNewCodContext", errorNewCodContext);
            argumentsOfScenario.Add("ErrorQtyBenMin", errorQtyBenMin);
            argumentsOfScenario.Add("MinValue", minValue);
            argumentsOfScenario.Add("MaxValue", maxValue);
            argumentsOfScenario.Add("BenefitValue", benefitValue);
            argumentsOfScenario.Add("ErrorQtyBenMax", errorQtyBenMax);
            argumentsOfScenario.Add("ErrorQtyBenSoftMax", errorQtyBenSoftMax);
            argumentsOfScenario.Add("MaxValue2", maxValue2);
            argumentsOfScenario.Add("MaxDiscValue", maxDiscValue);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TC_465350_ForMapping", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("the user is on the \'Advanced Pricing Actions\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When(string.Format("the user filters the column by column name \'Code\', \'like\', \'{0}\'", aP1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.And("the user opens the grid item in row \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.Then("the user is on the \'General Info Tab\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
 testRunner.And("the user clicks on the \'Edit Segmented Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.When("the user clicks on the \'Side Panel Tab;Benefits\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.Then("the user is on the \'Benefits Tab\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.When("the user clicks on the \'Sub Tab;Benefit Brackets\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
 testRunner.And("the user clicks on the \'Node;Thresholds - Quantity 48 CARTONS > Group Benefit1 fo" +
                        "r WEB_SFA_SF_CNVACT_034 - Cost 48 - Max Number of Times 0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.Then("the user clicks on the \'Benefits Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
 testRunner.And("the \'Benefit pop up menu\' is visible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.When("the user clicks on the \'Benefit Type drop down menu\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
 testRunner.And(string.Format("the user clicks on the \'Benefit Type;{0}\'", benType1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.Then(string.Format("the user validates that the Toolbar Error message is \'{0}\'", errorNewCodContext), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
 testRunner.When(string.Format("the user enters \'{0}\' in the \'Benefit field\'", benefitValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.And(string.Format("the user enters \'{0}\' in the \'Min Value field\'", minValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.Then(string.Format("the user validates that the Toolbar Error message is \'{0}\'", errorQtyBenMin), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
 testRunner.When("the user enters \'\' in the \'Min Value field\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
 testRunner.And("the user enters \'<MaxValue1>\' in the \'Max Value field\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.Then(string.Format("the user validates that the Toolbar Error message is \'{0}\'", errorQtyBenMax), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
 testRunner.And(string.Format("the user validates that the Toolbar Error message is \'{0}\'", errorQtyBenSoftMax), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.When(string.Format("the user enters \'{0}\' in the \'Max Value field\'", maxValue2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
 testRunner.And(string.Format("the user enters \'{0}\' in the \'1° Alarm Max discount field\'", maxDiscValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.Then(string.Format("the user validates that the Toolbar Error message is \'{0}\'", errorQtyBenSoftMax), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
 testRunner.And("the user closes all pages without saving the work done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
