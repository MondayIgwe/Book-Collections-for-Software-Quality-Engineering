// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kantar_BDD.Features.TPM.PromoActions
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestCase_783174")]
    public partial class TestCase_783174Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "TestCase_783174.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/TPM/PromoActions", "TestCase_783174", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TPM_SP_W_SMOKE_R80V1_0016_NEW_BEHAVIOR")]
        [NUnit.Framework.CategoryAttribute("BDD_783174")]
        [NUnit.Framework.CategoryAttribute("PROMO_Nightly")]
        [NUnit.Framework.CategoryAttribute("noSellOutDate")]
        [NUnit.Framework.CategoryAttribute("PromoActions")]
        [NUnit.Framework.TestCaseAttribute("AUTOM2", "EC86172", "Level 4", "Holder Level", "TPM_SP_W_SMOKE_R80V1_0016", "d/m/y", "d+10/m/y", "", "", "Loyalty Card", "004", "Product", "40", "0", "007", "009", "Product", "70", "90", "Total Promo Rebate", "40.00", "Net Margin", "-40.00", "Gross Cost", "40.00", "Products", "BACCO PINNOT 0.75 lt", "BACCO CHARDONNAY 0.75 lt", "BACCO CORTESE 0.75 lt", "40.00", "60.00", null)]
        public virtual void TPM_SP_W_SMOKE_R80V1_0016_NEW_BEHAVIOR(
                    string dIVISION, 
                    string cUSTOMER, 
                    string cUSTLEVEL, 
                    string cONFLEVEL, 
                    string pROMODESC, 
                    string sELLINSTART, 
                    string sELLINEND, 
                    string sELLOUTSTART, 
                    string sELLOUTEND, 
                    string mECHANICS, 
                    string pRODCODE, 
                    string pRODLEVEL, 
                    string lC_COST, 
                    string qTYESTIMATED, 
                    string pROD2, 
                    string pROD3, 
                    string pRODUCT_LEVEL, 
                    string pROD2_LCCOST, 
                    string pROD3_LCCOST, 
                    string tOTALPROMOREBATE, 
                    string tOTALPROMOREBATE_VALUES, 
                    string nETMARGIN, 
                    string nETMARGIN_VALUES, 
                    string gROSSCOST, 
                    string gROSSCOST_VALUES, 
                    string pRODUCTS, 
                    string pRODDESCR_009, 
                    string pRODDESCR_004, 
                    string pRODDESCR_007, 
                    string nEW_LCCOST_PROD1, 
                    string nEW_LCCOST_PROD2, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "BDD_783174",
                    "PROMO_Nightly",
                    "noSellOutDate",
                    "PromoActions"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("DIVISION", dIVISION);
            argumentsOfScenario.Add("CUSTOMER", cUSTOMER);
            argumentsOfScenario.Add("CUSTLEVEL", cUSTLEVEL);
            argumentsOfScenario.Add("CONFLEVEL", cONFLEVEL);
            argumentsOfScenario.Add("PROMODESC", pROMODESC);
            argumentsOfScenario.Add("SELLINSTART", sELLINSTART);
            argumentsOfScenario.Add("SELLINEND", sELLINEND);
            argumentsOfScenario.Add("SELLOUTSTART", sELLOUTSTART);
            argumentsOfScenario.Add("SELLOUTEND", sELLOUTEND);
            argumentsOfScenario.Add("MECHANICS", mECHANICS);
            argumentsOfScenario.Add("PRODCODE", pRODCODE);
            argumentsOfScenario.Add("PRODLEVEL", pRODLEVEL);
            argumentsOfScenario.Add("LC_COST", lC_COST);
            argumentsOfScenario.Add("QTYESTIMATED", qTYESTIMATED);
            argumentsOfScenario.Add("PROD2", pROD2);
            argumentsOfScenario.Add("PROD3", pROD3);
            argumentsOfScenario.Add("PRODUCT_LEVEL", pRODUCT_LEVEL);
            argumentsOfScenario.Add("PROD2_LCCOST", pROD2_LCCOST);
            argumentsOfScenario.Add("PROD3_LCCOST", pROD3_LCCOST);
            argumentsOfScenario.Add("TOTALPROMOREBATE", tOTALPROMOREBATE);
            argumentsOfScenario.Add("TOTALPROMOREBATE_VALUES", tOTALPROMOREBATE_VALUES);
            argumentsOfScenario.Add("NETMARGIN", nETMARGIN);
            argumentsOfScenario.Add("NETMARGIN_VALUES", nETMARGIN_VALUES);
            argumentsOfScenario.Add("GROSSCOST", gROSSCOST);
            argumentsOfScenario.Add("GROSSCOST_VALUES", gROSSCOST_VALUES);
            argumentsOfScenario.Add("PRODUCTS", pRODUCTS);
            argumentsOfScenario.Add("PRODDESCR_009", pRODDESCR_009);
            argumentsOfScenario.Add("PRODDESCR_004", pRODDESCR_004);
            argumentsOfScenario.Add("PRODDESCR_007", pRODDESCR_007);
            argumentsOfScenario.Add("NEW_LCCOST_PROD1", nEW_LCCOST_PROD1);
            argumentsOfScenario.Add("NEW_LCCOST_PROD2", nEW_LCCOST_PROD2);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TPM_SP_W_SMOKE_R80V1_0016_NEW_BEHAVIOR", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("the user navigates to the \'Promotional actions\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When(string.Format("the user creates a Promo \'{0}\' \'{1}\'", cUSTLEVEL, cUSTOMER), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.And(string.Format("the user populates the cockpit \'{0}\' \'{1}\' \'{2}\' \'{3}\' \'{4}\' \'{5}\'", pROMODESC, sELLINSTART, sELLINEND, sELLOUTSTART, sELLOUTEND, mECHANICS), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And(string.Format("the user adds a product \'{0}\' \'{1}\'", pRODLEVEL, pRODCODE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Loyalty Card\' for product code \'{1}\'", lC_COST, pRODCODE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Estimated quantity\' for product code \'{1}\'", qTYESTIMATED, pRODCODE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And("the user clicks on \'Side Panel Tab\' with value \'Cockpit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.When("the user retrieves text from element \'Input By Label Name\' with value \'Action Id\'" +
                        " and saves it as \'ActionId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
 testRunner.And("the user clicks on the \'Save Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.And("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And("the user clicks on the \'Refresh Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And("the user filters the column by column name \'Action Id\', \'Equal\', \'ActionId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.And("the user opens the grid item in row \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.And("the user clicks on \'Button\' with value \'Edit\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.And("the user clicks on \'Button\' with value \'Profit & Loss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.And("the user clicks on the \'Profit And Loss Refresh Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And("the user clicks on \'Top Tab\' with value \'Profit & Loss Retailer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And("the user clicks on the \'Profit And Loss Retailer Refresh Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And(string.Format("the user adds a product \'{0}\' \'{1}\'", pRODUCT_LEVEL, pROD2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.And(string.Format("the user adds a product \'{0}\' \'{1}\'", pRODUCT_LEVEL, pROD3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Loyalty Card\' for product code \'{1}\'", pROD2_LCCOST, pROD2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Loyalty Card\' for product code \'{1}\'", pROD3_LCCOST, pROD3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.And("the user clicks on \'Button\' with value \'Profit & Loss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.And("the user clicks on \'Top Tab\' with value \'Profit & Loss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.Then(string.Format("the user validates text \'{0}\' on column name \'Promo Total/Current\' for profit and" +
                            " loss \'{1}\' with unique column \'Promo Total / Current\'", tOTALPROMOREBATE_VALUES, tOTALPROMOREBATE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
 testRunner.And(string.Format("the user validates text \'{0}\' on column name \'Promo Total/Current\' for profit and" +
                            " loss \'{1}\' with unique column \'Promo Total / Current\'", nETMARGIN_VALUES, nETMARGIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.When("the user clicks on \'Top Tab\' with value \'Profit & Loss Retailer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then(string.Format("the user validates text \'{0}\' on column name \'Action/Current\' for profit and loss" +
                            " \'{1}\' with unique column \'Action / Current\'", gROSSCOST_VALUES, gROSSCOST), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
 testRunner.When("the user clicks on \'Button\' with value \'Products\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
 testRunner.And("the user clicks on the \'Remove Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
 testRunner.And("the user clicks on the \'Alert Dialog Ok Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.And("the user clicks on \'Button\' with value \'Profit & Loss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.And("the user clicks on \'Top Tab\' with value \'Profit & Loss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
 testRunner.Then(string.Format("the user validates text \'{0}\' on column name \'Action/Current\' for profit and loss" +
                            " \'{1}\' with unique column \'Promo Total / Current\'", tOTALPROMOREBATE_VALUES, tOTALPROMOREBATE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
 testRunner.And(string.Format("the user validates text \'{0}\' on column name \'Promo Total/Current\' for profit and" +
                            " loss \'{1}\' with unique column \'Promo Total / Current\'", nETMARGIN_VALUES, nETMARGIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.When("the user clicks on \'Top Tab\' with value \'Profit & Loss Retailer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
 testRunner.Then(string.Format("the user validates text \'{0}\' on column name \'Action/Current\' for profit and loss" +
                            " \'{1}\' with unique column \'Action / Current\'", gROSSCOST_VALUES, gROSSCOST), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
 testRunner.When("the user clicks on \'Top Tab\' with value \'Profit & Loss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
 testRunner.And("the user clicks on the \'Profit And Loss Refresh Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.Then(string.Format("the user validates text \'110.00\' on column name \'Promo Total/Current\' for profit " +
                            "and loss \'{0}\' with unique column \'Promo Total / Current\'", tOTALPROMOREBATE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
 testRunner.And(string.Format("the user validates text \'-110.00\' on column name \'Promo Total/Current\' for profit" +
                            " and loss \'{0}\' with unique column \'Promo Total / Current\'", nETMARGIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.When("the user clicks on \'Profit Loss Drop Down Trigger\' with value \'Detail type\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 65
 testRunner.And(string.Format("the user clicks on \'Selection Popup Checkbox\' with value \'{0}\'", pRODUCTS), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
 testRunner.And("the user clicks on \'Popup Ok Button\' with value \'Selection\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
 testRunner.And("user selects all products on Detail Data with unique row \'Total Promo Rebate\' and" +
                        " column \'Promo Total / Current\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.And("the user clicks on the \'Profit And Loss Refresh Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
 testRunner.And("the user clicks on \'Top Tab\' with value \'Profit & Loss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.Then(string.Format("the user validates text \'{0}\' on column name \'Product - BACCO CHARDONNAY 0.75 lt " +
                            "/ Current\' for profit and loss \'{1}\' with unique column \'Promo Total / Current\'", tOTALPROMOREBATE_VALUES, tOTALPROMOREBATE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
 testRunner.And(string.Format("the user validates text \'{0}\' on column name \'Product - BACCO CHARDONNAY 0.75 lt " +
                            "/ Current\' for profit and loss \'{1}\' with unique column \'Promo Total / Current\'", nETMARGIN_VALUES, nETMARGIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.And(string.Format("the user validates text \'70.00\' on column name \'Product - BACCO CORTESE 0.75 lt /" +
                            " Current\' for profit and loss \'{0}\' with unique column \'Promo Total / Current\'", tOTALPROMOREBATE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
 testRunner.And(string.Format("the user validates text \'-70.00\' on column name \'Product - BACCO CORTESE 0.75 lt " +
                            "/ Current\' for profit and loss \'{0}\' with unique column \'Promo Total / Current\'", nETMARGIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
 testRunner.When("the user clicks on \'Top Tab\' with value \'Profit & Loss Retailer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
 testRunner.And("the user clicks on the \'Profit And Loss Retailer Refresh Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
 testRunner.Then(string.Format("the user validates text \'110.00\' on column name \'Action/Current\' for profit and l" +
                            "oss \'{0}\' with unique column \'Action / Current\'", gROSSCOST), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
 testRunner.When("the user clicks on \'Profit Loss Retailer Drop Down Trigger\' with value \'Detail ty" +
                        "pe\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
 testRunner.And(string.Format("the user clicks on \'Selection Popup Checkbox\' with value \'{0}\'", pRODUCTS), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.And("the user clicks on \'Popup Ok Button\' with value \'Selection\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.And("user selects all products on Detail Data with unique row \'Retail Net Cost\' and co" +
                        "lumn \'Action / Current\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
 testRunner.And("the user clicks on the \'Profit And Loss Retailer Refresh Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
 testRunner.Then(string.Format("the user validates text \'{0}\' on column name \'Product - BACCO CHARDONNAY 0.75 lt " +
                            "/ Current\' for profit and loss \'{1}\' with unique column \'Action / Current\'", gROSSCOST_VALUES, gROSSCOST), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
 testRunner.And(string.Format("the user validates text \'70.00\' on column name \'Product - BACCO CORTESE 0.75 lt /" +
                            " Current\' for profit and loss \'{0}\' with unique column \'Action / Current\'", gROSSCOST), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
 testRunner.When("the user clicks on \'Button\' with value \'Products\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 96
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Loyalty Card\' for product code \'{1}\'", nEW_LCCOST_PROD1, pRODCODE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
 testRunner.And(string.Format("the user enters \'{0}\' on column name \'Loyalty Card\' for product code \'{1}\'", nEW_LCCOST_PROD2, pROD2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
 testRunner.And("the user clicks on \'Button\' with value \'Profit & Loss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 100
 testRunner.And("the user clicks on \'Top Tab\' with value \'Profit & Loss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 101
 testRunner.And("the user clicks on the \'Profit And Loss Refresh Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
 testRunner.Then(string.Format("the user validates text \'100.00\' on column name \'Promo Total / Current\' for profi" +
                            "t and loss \'{0}\' with unique column \'Promo Total / Current\'", tOTALPROMOREBATE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 103
 testRunner.And(string.Format("the user validates text \'-100.00\' on column name \'Promo Total / Current\' for prof" +
                            "it and loss \'{0}\' with unique column \'Promo Total / Current\'", nETMARGIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
 testRunner.And(string.Format("the user validates text \'{0}\' on column name \'Product - BACCO CHARDONNAY 0.75 lt " +
                            "/ Current\' for profit and loss \'{1}\' with unique column \'Promo Total / Current\'", tOTALPROMOREBATE_VALUES, tOTALPROMOREBATE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
 testRunner.And(string.Format("the user validates text \'{0}\' on column name \'Product - BACCO CHARDONNAY 0.75 lt " +
                            "/ Current\' for profit and loss \'{1}\' with unique column \'Promo Total / Current\'", nETMARGIN_VALUES, nETMARGIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
 testRunner.And(string.Format("the user validates text \'{0}\' on column name \'Product - BACCO CORTESE 0.75 lt / C" +
                            "urrent\' for profit and loss \'{1}\' with unique column \'Promo Total / Current\'", nEW_LCCOST_PROD2, tOTALPROMOREBATE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
 testRunner.And(string.Format("the user validates text \'-60.00\' on column name \'Product - BACCO CORTESE 0.75 lt " +
                            "/ Current\' for profit and loss \'{0}\' with unique column \'Promo Total / Current\'", nETMARGIN), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
 testRunner.When("the user clicks on \'Top Tab\' with value \'Profit & Loss Retailer\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 114
 testRunner.And("the user clicks on the \'Profit And Loss Retailer Refresh Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
 testRunner.Then(string.Format("the user validates text \'100.00\' on column name \'Action / Current\' for profit and" +
                            " loss \'{0}\' with unique column \'Action / Current\'", gROSSCOST), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 118
 testRunner.And(string.Format("the user validates text \'{0}\' on column name \'Product - BACCO CHARDONNAY 0.75 lt " +
                            "/ Current\' for profit and loss \'{1}\' with unique column \'Action / Current\'", gROSSCOST_VALUES, gROSSCOST), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
 testRunner.And(string.Format("the user validates text \'60.00\' on column name \'Product - BACCO CORTESE 0.75 lt /" +
                            " Current\' for profit and loss \'{0}\' with unique column \'Action / Current\'", gROSSCOST), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 121
 testRunner.When("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 122
 testRunner.And("the user clicks on the \'Alert Dialog No Button\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
 testRunner.And("the user clicks on the \'Close Tab\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
